{"version":3,"file":"62.bundle.js","mappings":"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","sources":["webpack://pixi-mini-game/./node_modules/pixi.js/lib/rendering/high-shader/shader-bits/localUniformBit.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/text/utils/updateTextBounds.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/text/utils/getPo2TextureFromSource.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/graphics/gpu/colorToUniform.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/app/ResizePlugin.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/app/TickerPlugin.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/app/init.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/filters/FilterPipe.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/filters/FilterSystem.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/container/bounds/getRenderableBounds.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/filters/init.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/mesh/shared/MeshGeometry.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/mesh/shared/MeshPipe.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/mesh/init.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/text/sdfShader/shader-bits/localUniformMSDFBit.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/text/sdfShader/shader-bits/mSDFBit.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/text/sdfShader/SdfShader.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/text-bitmap/BitmapTextPipe.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/text-bitmap/init.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/text/canvas/CanvasTextPipe.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/utils/canvas/getCanvasBoundingBox.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/text/canvas/CanvasTextSystem.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/text/init.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/mesh-plane/PlaneGeometry.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/sprite-nine-slice/NineSliceGeometry.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/sprite-nine-slice/NineSliceSpritePipe.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/sprite-nine-slice/init.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/rendering/renderers/shared/state/State.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/sprite/BatchableSprite.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/sprite-tiling/shader/tilingBit.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/sprite-tiling/shader/TilingSpriteShader.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/sprite-tiling/utils/QuadGeometry.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/sprite-tiling/TilingSpritePipe.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/sprite-tiling/utils/setUvs.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/sprite-tiling/utils/applyMatrix.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/sprite-tiling/utils/setPositions.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/sprite-tiling/init.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/mesh/shared/BatchableMesh.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/graphics/shared/GraphicsPipe.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/graphics/init.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/text-html/HTMLTextPipe.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/text-html/HTMLTextRenderData.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/text-html/utils/textStyleToCSS.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/text-html/HTMLTextStyle.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/text-html/utils/loadFontCSS.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/text-html/utils/loadFontAsBase64.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/text-html/utils/getFontCss.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/text-html/utils/measureHtmlText.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/text-html/HTMLTextSystem.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/text-html/utils/extractFontFamilies.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/text-html/utils/getSVGUrl.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/text-html/utils/loadSVGImage.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/utils/browser/isSafari.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/text-html/utils/getTemporaryCanvasFromImage.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/text-html/init.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/particle-container/gl/GlParticleContainerAdaptor.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/particle-container/shared/utils/createIndicesForQuads.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/particle-container/shared/utils/generateParticleUpdateFunction.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/particle-container/shared/ParticleBuffer.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/particle-container/shared/shader/particles.wgsl.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/particle-container/shared/shader/ParticleShader.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/particle-container/shared/shader/particles.vert.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/particle-container/shared/shader/particles.frag.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/particle-container/shared/ParticleContainerPipe.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/particle-container/shared/GlParticleContainerPipe.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/particle-container/gpu/GpuParticleContainerAdaptor.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/particle-container/shared/GpuParticleContainerPipe.mjs","webpack://pixi-mini-game/./node_modules/pixi.js/lib/scene/particle-container/init.mjs"],"sourcesContent":["\"use strict\";\nconst localUniformBit = {\n  name: \"local-uniform-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n\n            struct LocalUniforms {\n                uTransformMatrix:mat3x3<f32>,\n                uColor:vec4<f32>,\n                uRound:f32,\n            }\n\n            @group(1) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `\n    ),\n    end: (\n      /* wgsl */\n      `\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    )\n  }\n};\nconst localUniformBitGroup2 = {\n  ...localUniformBit,\n  vertex: {\n    ...localUniformBit.vertex,\n    // replace the group!\n    header: localUniformBit.vertex.header.replace(\"group(1)\", \"group(2)\")\n  }\n};\nconst localUniformBitGl = {\n  name: \"local-uniform-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            vColor *= uColor;\n            modelMatrix = uTransformMatrix;\n        `\n    ),\n    end: (\n      /* glsl */\n      `\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    )\n  }\n};\n\nexport { localUniformBit, localUniformBitGl, localUniformBitGroup2 };\n//# sourceMappingURL=localUniformBit.mjs.map\n","import { updateQuadBounds } from '../../../utils/data/updateQuadBounds.mjs';\n\n\"use strict\";\nfunction updateTextBounds(batchableSprite, text) {\n  const { texture, bounds } = batchableSprite;\n  updateQuadBounds(bounds, text._anchor, texture);\n  const padding = text._style.padding;\n  bounds.minX -= padding;\n  bounds.minY -= padding;\n  bounds.maxX -= padding;\n  bounds.maxY -= padding;\n}\n\nexport { updateTextBounds };\n//# sourceMappingURL=updateTextBounds.mjs.map\n","import { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { Bounds } from '../../container/bounds/Bounds.mjs';\n\n\"use strict\";\nconst tempBounds = new Bounds();\nfunction getPo2TextureFromSource(image, width, height, resolution) {\n  const bounds = tempBounds;\n  bounds.minX = 0;\n  bounds.minY = 0;\n  bounds.maxX = image.width / resolution | 0;\n  bounds.maxY = image.height / resolution | 0;\n  const texture = TexturePool.getOptimalTexture(\n    bounds.width,\n    bounds.height,\n    resolution,\n    false\n  );\n  texture.source.uploadMethodId = \"image\";\n  texture.source.resource = image;\n  texture.source.alphaMode = \"premultiply-alpha-on-upload\";\n  texture.frame.width = width / resolution;\n  texture.frame.height = height / resolution;\n  texture.source.emit(\"update\", texture.source);\n  texture.updateUvs();\n  return texture;\n}\n\nexport { getPo2TextureFromSource };\n//# sourceMappingURL=getPo2TextureFromSource.mjs.map\n","\"use strict\";\nfunction colorToUniform(rgb, alpha, out, offset) {\n  out[offset++] = (rgb >> 16 & 255) / 255;\n  out[offset++] = (rgb >> 8 & 255) / 255;\n  out[offset++] = (rgb & 255) / 255;\n  out[offset++] = alpha;\n}\nfunction color32BitToUniform(abgr, out, offset) {\n  const alpha = (abgr >> 24 & 255) / 255;\n  out[offset++] = (abgr & 255) / 255 * alpha;\n  out[offset++] = (abgr >> 8 & 255) / 255 * alpha;\n  out[offset++] = (abgr >> 16 & 255) / 255 * alpha;\n  out[offset++] = alpha;\n}\n\nexport { color32BitToUniform, colorToUniform };\n//# sourceMappingURL=colorToUniform.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\n\n\"use strict\";\nclass ResizePlugin {\n  /**\n   * Initialize the plugin with scope of application instance\n   * @static\n   * @private\n   * @param {object} [options] - See application options\n   */\n  static init(options) {\n    Object.defineProperty(\n      this,\n      \"resizeTo\",\n      /**\n       * The HTML element or window to automatically resize the\n       * renderer's view element to match width and height.\n       * @member {Window|HTMLElement}\n       * @name resizeTo\n       * @memberof app.Application#\n       */\n      {\n        set(dom) {\n          globalThis.removeEventListener(\"resize\", this.queueResize);\n          this._resizeTo = dom;\n          if (dom) {\n            globalThis.addEventListener(\"resize\", this.queueResize);\n            this.resize();\n          }\n        },\n        get() {\n          return this._resizeTo;\n        }\n      }\n    );\n    this.queueResize = () => {\n      if (!this._resizeTo) {\n        return;\n      }\n      this._cancelResize();\n      this._resizeId = requestAnimationFrame(() => this.resize());\n    };\n    this._cancelResize = () => {\n      if (this._resizeId) {\n        cancelAnimationFrame(this._resizeId);\n        this._resizeId = null;\n      }\n    };\n    this.resize = () => {\n      if (!this._resizeTo) {\n        return;\n      }\n      this._cancelResize();\n      let width;\n      let height;\n      if (this._resizeTo === globalThis.window) {\n        width = globalThis.innerWidth;\n        height = globalThis.innerHeight;\n      } else {\n        const { clientWidth, clientHeight } = this._resizeTo;\n        width = clientWidth;\n        height = clientHeight;\n      }\n      this.renderer.resize(width, height);\n      this.render();\n    };\n    this._resizeId = null;\n    this._resizeTo = null;\n    this.resizeTo = options.resizeTo || null;\n  }\n  /**\n   * Clean up the ticker, scoped to application\n   * @static\n   * @private\n   */\n  static destroy() {\n    globalThis.removeEventListener(\"resize\", this.queueResize);\n    this._cancelResize();\n    this._cancelResize = null;\n    this.queueResize = null;\n    this.resizeTo = null;\n    this.resize = null;\n  }\n}\n/** @ignore */\nResizePlugin.extension = ExtensionType.Application;\n\nexport { ResizePlugin };\n//# sourceMappingURL=ResizePlugin.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\nimport { UPDATE_PRIORITY } from '../ticker/const.mjs';\nimport { Ticker } from '../ticker/Ticker.mjs';\n\n\"use strict\";\nclass TickerPlugin {\n  /**\n   * Initialize the plugin with scope of application instance\n   * @static\n   * @private\n   * @param {object} [options] - See application options\n   */\n  static init(options) {\n    options = Object.assign({\n      autoStart: true,\n      sharedTicker: false\n    }, options);\n    Object.defineProperty(\n      this,\n      \"ticker\",\n      {\n        set(ticker) {\n          if (this._ticker) {\n            this._ticker.remove(this.render, this);\n          }\n          this._ticker = ticker;\n          if (ticker) {\n            ticker.add(this.render, this, UPDATE_PRIORITY.LOW);\n          }\n        },\n        get() {\n          return this._ticker;\n        }\n      }\n    );\n    this.stop = () => {\n      this._ticker.stop();\n    };\n    this.start = () => {\n      this._ticker.start();\n    };\n    this._ticker = null;\n    this.ticker = options.sharedTicker ? Ticker.shared : new Ticker();\n    if (options.autoStart) {\n      this.start();\n    }\n  }\n  /**\n   * Clean up the ticker, scoped to application.\n   * @static\n   * @private\n   */\n  static destroy() {\n    if (this._ticker) {\n      const oldTicker = this._ticker;\n      this.ticker = null;\n      oldTicker.destroy();\n    }\n  }\n}\n/** @ignore */\nTickerPlugin.extension = ExtensionType.Application;\n\nexport { TickerPlugin };\n//# sourceMappingURL=TickerPlugin.mjs.map\n","import { extensions } from '../extensions/Extensions.mjs';\nimport { ResizePlugin } from './ResizePlugin.mjs';\nimport { TickerPlugin } from './TickerPlugin.mjs';\n\n\"use strict\";\nextensions.add(ResizePlugin);\nextensions.add(TickerPlugin);\n//# sourceMappingURL=init.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\n\n\"use strict\";\nclass FilterPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  push(filterEffect, container, instructionSet) {\n    const renderPipes = this._renderer.renderPipes;\n    renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"filter\",\n      canBundle: false,\n      action: \"pushFilter\",\n      container,\n      filterEffect\n    });\n  }\n  pop(_filterEffect, _container, instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"filter\",\n      action: \"popFilter\",\n      canBundle: false\n    });\n  }\n  execute(instruction) {\n    if (instruction.action === \"pushFilter\") {\n      this._renderer.filter.push(instruction);\n    } else if (instruction.action === \"popFilter\") {\n      this._renderer.filter.pop();\n    }\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\nFilterPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"filter\"\n};\n\nexport { FilterPipe };\n//# sourceMappingURL=FilterPipe.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\nimport { Matrix } from '../maths/matrix/Matrix.mjs';\nimport { Point } from '../maths/point/Point.mjs';\nimport { BindGroup } from '../rendering/renderers/gpu/shader/BindGroup.mjs';\nimport { Geometry } from '../rendering/renderers/shared/geometry/Geometry.mjs';\nimport { UniformGroup } from '../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { Texture } from '../rendering/renderers/shared/texture/Texture.mjs';\nimport { TexturePool } from '../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { RendererType } from '../rendering/renderers/types.mjs';\nimport { Bounds } from '../scene/container/bounds/Bounds.mjs';\nimport { getGlobalRenderableBounds } from '../scene/container/bounds/getRenderableBounds.mjs';\nimport { warn } from '../utils/logging/warn.mjs';\n\n\"use strict\";\nconst quadGeometry = new Geometry({\n  attributes: {\n    aPosition: {\n      buffer: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      format: \"float32x2\",\n      stride: 2 * 4,\n      offset: 0\n    }\n  },\n  indexBuffer: new Uint32Array([0, 1, 2, 0, 2, 3])\n});\nclass FilterSystem {\n  constructor(renderer) {\n    this._filterStackIndex = 0;\n    this._filterStack = [];\n    this._filterGlobalUniforms = new UniformGroup({\n      uInputSize: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uInputPixel: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uInputClamp: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uOutputFrame: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uGlobalFrame: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uOutputTexture: { value: new Float32Array(4), type: \"vec4<f32>\" }\n    });\n    this._globalFilterBindGroup = new BindGroup({});\n    this.renderer = renderer;\n  }\n  /**\n   * The back texture of the currently active filter. Requires the filter to have `blendRequired` set to true.\n   * @readonly\n   */\n  get activeBackTexture() {\n    return this._activeFilterData?.backTexture;\n  }\n  push(instruction) {\n    const renderer = this.renderer;\n    const filters = instruction.filterEffect.filters;\n    if (!this._filterStack[this._filterStackIndex]) {\n      this._filterStack[this._filterStackIndex] = this._getFilterData();\n    }\n    const filterData = this._filterStack[this._filterStackIndex];\n    this._filterStackIndex++;\n    if (filters.length === 0) {\n      filterData.skip = true;\n      return;\n    }\n    const bounds = filterData.bounds;\n    if (instruction.renderables) {\n      getGlobalRenderableBounds(instruction.renderables, bounds);\n    } else if (instruction.filterEffect.filterArea) {\n      bounds.clear();\n      bounds.addRect(instruction.filterEffect.filterArea);\n      bounds.applyMatrix(instruction.container.worldTransform);\n    } else {\n      instruction.container.getFastGlobalBounds(true, bounds);\n    }\n    if (instruction.container) {\n      const renderGroup = instruction.container.renderGroup || instruction.container.parentRenderGroup;\n      const filterFrameTransform = renderGroup.cacheToLocalTransform;\n      if (filterFrameTransform) {\n        bounds.applyMatrix(filterFrameTransform);\n      }\n    }\n    const colorTextureSource = renderer.renderTarget.renderTarget.colorTexture.source;\n    let resolution = Infinity;\n    let padding = 0;\n    let antialias = true;\n    let blendRequired = false;\n    let enabled = false;\n    let clipToViewport = true;\n    for (let i = 0; i < filters.length; i++) {\n      const filter = filters[i];\n      resolution = Math.min(resolution, filter.resolution === \"inherit\" ? colorTextureSource._resolution : filter.resolution);\n      padding += filter.padding;\n      if (filter.antialias === \"off\") {\n        antialias = false;\n      } else if (filter.antialias === \"inherit\") {\n        antialias && (antialias = colorTextureSource.antialias);\n      }\n      if (!filter.clipToViewport) {\n        clipToViewport = false;\n      }\n      const isCompatible = !!(filter.compatibleRenderers & renderer.type);\n      if (!isCompatible) {\n        enabled = false;\n        break;\n      }\n      if (filter.blendRequired && !(renderer.backBuffer?.useBackBuffer ?? true)) {\n        warn(\"Blend filter requires backBuffer on WebGL renderer to be enabled. Set `useBackBuffer: true` in the renderer options.\");\n        enabled = false;\n        break;\n      }\n      enabled = filter.enabled || enabled;\n      blendRequired || (blendRequired = filter.blendRequired);\n    }\n    if (!enabled) {\n      filterData.skip = true;\n      return;\n    }\n    if (clipToViewport) {\n      const viewPort = renderer.renderTarget.rootViewPort;\n      const rootResolution = renderer.renderTarget.renderTarget.resolution;\n      bounds.fitBounds(0, viewPort.width / rootResolution, 0, viewPort.height / rootResolution);\n    }\n    bounds.scale(resolution).ceil().scale(1 / resolution).pad(padding | 0);\n    if (!bounds.isPositive) {\n      filterData.skip = true;\n      return;\n    }\n    filterData.skip = false;\n    filterData.bounds = bounds;\n    filterData.blendRequired = blendRequired;\n    filterData.container = instruction.container;\n    filterData.filterEffect = instruction.filterEffect;\n    filterData.previousRenderSurface = renderer.renderTarget.renderSurface;\n    filterData.inputTexture = TexturePool.getOptimalTexture(\n      bounds.width,\n      bounds.height,\n      resolution,\n      antialias\n    );\n    renderer.renderTarget.bind(filterData.inputTexture, true);\n    renderer.globalUniforms.push({\n      offset: bounds\n    });\n  }\n  pop() {\n    const renderer = this.renderer;\n    this._filterStackIndex--;\n    const filterData = this._filterStack[this._filterStackIndex];\n    if (filterData.skip) {\n      return;\n    }\n    this._activeFilterData = filterData;\n    const inputTexture = filterData.inputTexture;\n    const bounds = filterData.bounds;\n    let backTexture = Texture.EMPTY;\n    renderer.renderTarget.finishRenderPass();\n    if (filterData.blendRequired) {\n      const previousBounds = this._filterStackIndex > 0 ? this._filterStack[this._filterStackIndex - 1].bounds : null;\n      const renderTarget = renderer.renderTarget.getRenderTarget(filterData.previousRenderSurface);\n      backTexture = this.getBackTexture(renderTarget, bounds, previousBounds);\n    }\n    filterData.backTexture = backTexture;\n    const filters = filterData.filterEffect.filters;\n    this._globalFilterBindGroup.setResource(inputTexture.source.style, 2);\n    this._globalFilterBindGroup.setResource(backTexture.source, 3);\n    renderer.globalUniforms.pop();\n    if (filters.length === 1) {\n      filters[0].apply(this, inputTexture, filterData.previousRenderSurface, false);\n      TexturePool.returnTexture(inputTexture);\n    } else {\n      let flip = filterData.inputTexture;\n      let flop = TexturePool.getOptimalTexture(\n        bounds.width,\n        bounds.height,\n        flip.source._resolution,\n        false\n      );\n      let i = 0;\n      for (i = 0; i < filters.length - 1; ++i) {\n        const filter = filters[i];\n        filter.apply(this, flip, flop, true);\n        const t = flip;\n        flip = flop;\n        flop = t;\n      }\n      filters[i].apply(this, flip, filterData.previousRenderSurface, false);\n      TexturePool.returnTexture(flip);\n      TexturePool.returnTexture(flop);\n    }\n    if (filterData.blendRequired) {\n      TexturePool.returnTexture(backTexture);\n    }\n  }\n  getBackTexture(lastRenderSurface, bounds, previousBounds) {\n    const backgroundResolution = lastRenderSurface.colorTexture.source._resolution;\n    const backTexture = TexturePool.getOptimalTexture(\n      bounds.width,\n      bounds.height,\n      backgroundResolution,\n      false\n    );\n    let x = bounds.minX;\n    let y = bounds.minY;\n    if (previousBounds) {\n      x -= previousBounds.minX;\n      y -= previousBounds.minY;\n    }\n    x = Math.floor(x * backgroundResolution);\n    y = Math.floor(y * backgroundResolution);\n    const width = Math.ceil(bounds.width * backgroundResolution);\n    const height = Math.ceil(bounds.height * backgroundResolution);\n    this.renderer.renderTarget.copyToTexture(\n      lastRenderSurface,\n      backTexture,\n      { x, y },\n      { width, height },\n      { x: 0, y: 0 }\n    );\n    return backTexture;\n  }\n  applyFilter(filter, input, output, clear) {\n    const renderer = this.renderer;\n    const filterData = this._filterStack[this._filterStackIndex];\n    const bounds = filterData.bounds;\n    const offset = Point.shared;\n    const previousRenderSurface = filterData.previousRenderSurface;\n    const isFinalTarget = previousRenderSurface === output;\n    let resolution = this.renderer.renderTarget.rootRenderTarget.colorTexture.source._resolution;\n    let currentIndex = this._filterStackIndex - 1;\n    while (currentIndex > 0 && this._filterStack[currentIndex].skip) {\n      --currentIndex;\n    }\n    if (currentIndex > 0) {\n      resolution = this._filterStack[currentIndex].inputTexture.source._resolution;\n    }\n    const filterUniforms = this._filterGlobalUniforms;\n    const uniforms = filterUniforms.uniforms;\n    const outputFrame = uniforms.uOutputFrame;\n    const inputSize = uniforms.uInputSize;\n    const inputPixel = uniforms.uInputPixel;\n    const inputClamp = uniforms.uInputClamp;\n    const globalFrame = uniforms.uGlobalFrame;\n    const outputTexture = uniforms.uOutputTexture;\n    if (isFinalTarget) {\n      let lastIndex = this._filterStackIndex;\n      while (lastIndex > 0) {\n        lastIndex--;\n        const filterData2 = this._filterStack[this._filterStackIndex - 1];\n        if (!filterData2.skip) {\n          offset.x = filterData2.bounds.minX;\n          offset.y = filterData2.bounds.minY;\n          break;\n        }\n      }\n      outputFrame[0] = bounds.minX - offset.x;\n      outputFrame[1] = bounds.minY - offset.y;\n    } else {\n      outputFrame[0] = 0;\n      outputFrame[1] = 0;\n    }\n    outputFrame[2] = input.frame.width;\n    outputFrame[3] = input.frame.height;\n    inputSize[0] = input.source.width;\n    inputSize[1] = input.source.height;\n    inputSize[2] = 1 / inputSize[0];\n    inputSize[3] = 1 / inputSize[1];\n    inputPixel[0] = input.source.pixelWidth;\n    inputPixel[1] = input.source.pixelHeight;\n    inputPixel[2] = 1 / inputPixel[0];\n    inputPixel[3] = 1 / inputPixel[1];\n    inputClamp[0] = 0.5 * inputPixel[2];\n    inputClamp[1] = 0.5 * inputPixel[3];\n    inputClamp[2] = input.frame.width * inputSize[2] - 0.5 * inputPixel[2];\n    inputClamp[3] = input.frame.height * inputSize[3] - 0.5 * inputPixel[3];\n    const rootTexture = this.renderer.renderTarget.rootRenderTarget.colorTexture;\n    globalFrame[0] = offset.x * resolution;\n    globalFrame[1] = offset.y * resolution;\n    globalFrame[2] = rootTexture.source.width * resolution;\n    globalFrame[3] = rootTexture.source.height * resolution;\n    const renderTarget = this.renderer.renderTarget.getRenderTarget(output);\n    renderer.renderTarget.bind(output, !!clear);\n    if (output instanceof Texture) {\n      outputTexture[0] = output.frame.width;\n      outputTexture[1] = output.frame.height;\n    } else {\n      outputTexture[0] = renderTarget.width;\n      outputTexture[1] = renderTarget.height;\n    }\n    outputTexture[2] = renderTarget.isRoot ? -1 : 1;\n    filterUniforms.update();\n    if (renderer.renderPipes.uniformBatch) {\n      const batchUniforms = renderer.renderPipes.uniformBatch.getUboResource(filterUniforms);\n      this._globalFilterBindGroup.setResource(batchUniforms, 0);\n    } else {\n      this._globalFilterBindGroup.setResource(filterUniforms, 0);\n    }\n    this._globalFilterBindGroup.setResource(input.source, 1);\n    this._globalFilterBindGroup.setResource(input.source.style, 2);\n    filter.groups[0] = this._globalFilterBindGroup;\n    renderer.encoder.draw({\n      geometry: quadGeometry,\n      shader: filter,\n      state: filter._state,\n      topology: \"triangle-list\"\n    });\n    if (renderer.type === RendererType.WEBGL) {\n      renderer.renderTarget.finishRenderPass();\n    }\n  }\n  _getFilterData() {\n    return {\n      skip: false,\n      inputTexture: null,\n      bounds: new Bounds(),\n      container: null,\n      filterEffect: null,\n      blendRequired: false,\n      previousRenderSurface: null\n    };\n  }\n  /**\n   * Multiply _input normalized coordinates_ to this matrix to get _sprite texture normalized coordinates_.\n   *\n   * Use `outputMatrix * vTextureCoord` in the shader.\n   * @param outputMatrix - The matrix to output to.\n   * @param {Sprite} sprite - The sprite to map to.\n   * @returns The mapped matrix.\n   */\n  calculateSpriteMatrix(outputMatrix, sprite) {\n    const data = this._activeFilterData;\n    const mappedMatrix = outputMatrix.set(\n      data.inputTexture._source.width,\n      0,\n      0,\n      data.inputTexture._source.height,\n      data.bounds.minX,\n      data.bounds.minY\n    );\n    const worldTransform = sprite.worldTransform.copyTo(Matrix.shared);\n    const renderGroup = sprite.renderGroup || sprite.parentRenderGroup;\n    if (renderGroup && renderGroup.cacheToLocalTransform) {\n      worldTransform.prepend(renderGroup.cacheToLocalTransform);\n    }\n    worldTransform.invert();\n    mappedMatrix.prepend(worldTransform);\n    mappedMatrix.scale(\n      1 / sprite.texture.frame.width,\n      1 / sprite.texture.frame.height\n    );\n    mappedMatrix.translate(sprite.anchor.x, sprite.anchor.y);\n    return mappedMatrix;\n  }\n}\n/** @ignore */\nFilterSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"filter\"\n};\n\nexport { FilterSystem };\n//# sourceMappingURL=FilterSystem.mjs.map\n","\"use strict\";\nfunction getGlobalRenderableBounds(renderables, bounds) {\n  bounds.clear();\n  const tempMatrix = bounds.matrix;\n  for (let i = 0; i < renderables.length; i++) {\n    const renderable = renderables[i];\n    if (renderable.globalDisplayStatus < 7) {\n      continue;\n    }\n    bounds.matrix = renderable.worldTransform;\n    bounds.addBounds(renderable.bounds);\n  }\n  bounds.matrix = tempMatrix;\n  return bounds;\n}\n\nexport { getGlobalRenderableBounds };\n//# sourceMappingURL=getRenderableBounds.mjs.map\n","import { extensions } from '../extensions/Extensions.mjs';\nimport { FilterPipe } from './FilterPipe.mjs';\nimport { FilterSystem } from './FilterSystem.mjs';\n\n\"use strict\";\nextensions.add(FilterSystem);\nextensions.add(FilterPipe);\n//# sourceMappingURL=init.mjs.map\n","import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer.mjs';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const.mjs';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry.mjs';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation.mjs';\n\n\"use strict\";\nconst _MeshGeometry = class _MeshGeometry extends Geometry {\n  constructor(...args) {\n    let options = args[0] ?? {};\n    if (options instanceof Float32Array) {\n      deprecation(v8_0_0, \"use new MeshGeometry({ positions, uvs, indices }) instead\");\n      options = {\n        positions: options,\n        uvs: args[1],\n        indices: args[2]\n      };\n    }\n    options = { ..._MeshGeometry.defaultOptions, ...options };\n    const positions = options.positions || new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n    let uvs = options.uvs;\n    if (!uvs) {\n      if (options.positions) {\n        uvs = new Float32Array(positions.length);\n      } else {\n        uvs = new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n      }\n    }\n    const indices = options.indices || new Uint32Array([0, 1, 2, 0, 2, 3]);\n    const shrinkToFit = options.shrinkBuffersToFit;\n    const positionBuffer = new Buffer({\n      data: positions,\n      label: \"attribute-mesh-positions\",\n      shrinkToFit,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    const uvBuffer = new Buffer({\n      data: uvs,\n      label: \"attribute-mesh-uvs\",\n      shrinkToFit,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    const indexBuffer = new Buffer({\n      data: indices,\n      label: \"index-mesh-buffer\",\n      shrinkToFit,\n      usage: BufferUsage.INDEX | BufferUsage.COPY_DST\n    });\n    super({\n      attributes: {\n        aPosition: {\n          buffer: positionBuffer,\n          format: \"float32x2\",\n          stride: 2 * 4,\n          offset: 0\n        },\n        aUV: {\n          buffer: uvBuffer,\n          format: \"float32x2\",\n          stride: 2 * 4,\n          offset: 0\n        }\n      },\n      indexBuffer,\n      topology: options.topology\n    });\n    this.batchMode = \"auto\";\n  }\n  /** The positions of the mesh. */\n  get positions() {\n    return this.attributes.aPosition.buffer.data;\n  }\n  /**\n   * Set the positions of the mesh.\n   * When setting the positions, its important that the uvs array is at least as long as the positions array.\n   * otherwise the geometry will not be valid.\n   * @param {Float32Array} value - The positions of the mesh.\n   */\n  set positions(value) {\n    this.attributes.aPosition.buffer.data = value;\n  }\n  /** The UVs of the mesh. */\n  get uvs() {\n    return this.attributes.aUV.buffer.data;\n  }\n  /**\n   * Set the UVs of the mesh.\n   * Its important that the uvs array you set is at least as long as the positions array.\n   * otherwise the geometry will not be valid.\n   * @param {Float32Array} value - The UVs of the mesh.\n   */\n  set uvs(value) {\n    this.attributes.aUV.buffer.data = value;\n  }\n  /** The indices of the mesh. */\n  get indices() {\n    return this.indexBuffer.data;\n  }\n  set indices(value) {\n    this.indexBuffer.data = value;\n  }\n};\n_MeshGeometry.defaultOptions = {\n  topology: \"triangle-list\",\n  shrinkBuffersToFit: false\n};\nlet MeshGeometry = _MeshGeometry;\n\nexport { MeshGeometry };\n//# sourceMappingURL=MeshGeometry.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { BindGroup } from '../../../rendering/renderers/gpu/shader/BindGroup.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform.mjs';\nimport { BatchableMesh } from './BatchableMesh.mjs';\n\n\"use strict\";\nclass MeshPipe {\n  constructor(renderer, adaptor) {\n    this.localUniforms = new UniformGroup({\n      uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n      uRound: { value: 0, type: \"f32\" }\n    });\n    this.localUniformsBindGroup = new BindGroup({\n      0: this.localUniforms\n    });\n    this._meshDataHash = /* @__PURE__ */ Object.create(null);\n    this._gpuBatchableMeshHash = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this._adaptor.init();\n    renderer.renderableGC.addManagedHash(this, \"_gpuBatchableMeshHash\");\n    renderer.renderableGC.addManagedHash(this, \"_meshDataHash\");\n  }\n  validateRenderable(mesh) {\n    const meshData = this._getMeshData(mesh);\n    const wasBatched = meshData.batched;\n    const isBatched = mesh.batched;\n    meshData.batched = isBatched;\n    if (wasBatched !== isBatched) {\n      return true;\n    } else if (isBatched) {\n      const geometry = mesh._geometry;\n      if (geometry.indices.length !== meshData.indexSize || geometry.positions.length !== meshData.vertexSize) {\n        meshData.indexSize = geometry.indices.length;\n        meshData.vertexSize = geometry.positions.length;\n        return true;\n      }\n      const batchableMesh = this._getBatchableMesh(mesh);\n      if (batchableMesh.texture.uid !== mesh._texture.uid) {\n        batchableMesh._textureMatrixUpdateId = -1;\n      }\n      return !batchableMesh._batcher.checkAndUpdateTexture(\n        batchableMesh,\n        mesh._texture\n      );\n    }\n    return false;\n  }\n  addRenderable(mesh, instructionSet) {\n    const batcher = this.renderer.renderPipes.batch;\n    const { batched } = this._getMeshData(mesh);\n    if (batched) {\n      const gpuBatchableMesh = this._getBatchableMesh(mesh);\n      gpuBatchableMesh.setTexture(mesh._texture);\n      gpuBatchableMesh.geometry = mesh._geometry;\n      batcher.addToBatch(gpuBatchableMesh, instructionSet);\n    } else {\n      batcher.break(instructionSet);\n      instructionSet.add(mesh);\n    }\n  }\n  updateRenderable(mesh) {\n    if (mesh.batched) {\n      const gpuBatchableMesh = this._gpuBatchableMeshHash[mesh.uid];\n      gpuBatchableMesh.setTexture(mesh._texture);\n      gpuBatchableMesh.geometry = mesh._geometry;\n      gpuBatchableMesh._batcher.updateElement(gpuBatchableMesh);\n    }\n  }\n  destroyRenderable(mesh) {\n    this._meshDataHash[mesh.uid] = null;\n    const gpuMesh = this._gpuBatchableMeshHash[mesh.uid];\n    if (gpuMesh) {\n      BigPool.return(gpuMesh);\n      this._gpuBatchableMeshHash[mesh.uid] = null;\n    }\n    mesh.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  execute(mesh) {\n    if (!mesh.isRenderable)\n      return;\n    mesh.state.blendMode = getAdjustedBlendModeBlend(mesh.groupBlendMode, mesh.texture._source);\n    const localUniforms = this.localUniforms;\n    localUniforms.uniforms.uTransformMatrix = mesh.groupTransform;\n    localUniforms.uniforms.uRound = this.renderer._roundPixels | mesh._roundPixels;\n    localUniforms.update();\n    color32BitToUniform(\n      mesh.groupColorAlpha,\n      localUniforms.uniforms.uColor,\n      0\n    );\n    this._adaptor.execute(this, mesh);\n  }\n  _getMeshData(mesh) {\n    return this._meshDataHash[mesh.uid] || this._initMeshData(mesh);\n  }\n  _initMeshData(mesh) {\n    this._meshDataHash[mesh.uid] = {\n      batched: mesh.batched,\n      indexSize: mesh._geometry.indices?.length,\n      vertexSize: mesh._geometry.positions?.length\n    };\n    mesh.on(\"destroyed\", this._destroyRenderableBound);\n    return this._meshDataHash[mesh.uid];\n  }\n  _getBatchableMesh(mesh) {\n    return this._gpuBatchableMeshHash[mesh.uid] || this._initBatchableMesh(mesh);\n  }\n  _initBatchableMesh(mesh) {\n    const gpuMesh = BigPool.get(BatchableMesh);\n    gpuMesh.renderable = mesh;\n    gpuMesh.setTexture(mesh._texture);\n    gpuMesh.transform = mesh.groupTransform;\n    gpuMesh.roundPixels = this.renderer._roundPixels | mesh._roundPixels;\n    this._gpuBatchableMeshHash[mesh.uid] = gpuMesh;\n    return gpuMesh;\n  }\n  destroy() {\n    for (const i in this._gpuBatchableMeshHash) {\n      if (this._gpuBatchableMeshHash[i]) {\n        BigPool.return(this._gpuBatchableMeshHash[i]);\n      }\n    }\n    this._gpuBatchableMeshHash = null;\n    this._meshDataHash = null;\n    this.localUniforms = null;\n    this.localUniformsBindGroup = null;\n    this._adaptor.destroy();\n    this._adaptor = null;\n    this.renderer = null;\n  }\n}\n/** @ignore */\nMeshPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"mesh\"\n};\n\nexport { MeshPipe };\n//# sourceMappingURL=MeshPipe.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { MeshPipe } from './shared/MeshPipe.mjs';\n\n\"use strict\";\nextensions.add(MeshPipe);\n//# sourceMappingURL=init.mjs.map\n","\"use strict\";\nconst localUniformMSDFBit = {\n  name: \"local-uniform-msdf-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32,\n                uRound:f32,\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `\n    ),\n    end: (\n      /* wgsl */\n      `\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n         `\n    ),\n    main: (\n      /* wgsl */\n      ` \n            outColor = vec4<f32>(calculateMSDFAlpha(outColor, localUniforms.uColor, localUniforms.uDistance));\n        `\n    )\n  }\n};\nconst localUniformMSDFBitGl = {\n  name: \"local-uniform-msdf-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            vColor *= uColor;\n            modelMatrix *= uTransformMatrix;\n        `\n    ),\n    end: (\n      /* glsl */\n      `\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            uniform float uDistance;\n         `\n    ),\n    main: (\n      /* glsl */\n      ` \n            outColor = vec4(calculateMSDFAlpha(outColor, vColor, uDistance));\n        `\n    )\n  }\n};\n\nexport { localUniformMSDFBit, localUniformMSDFBitGl };\n//# sourceMappingURL=localUniformMSDFBit.mjs.map\n","\"use strict\";\nconst mSDFBit = {\n  name: \"msdf-bit\",\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            fn calculateMSDFAlpha(msdfColor:vec4<f32>, shapeColor:vec4<f32>, distance:f32) -> f32 {\n                \n                // MSDF\n                var median = msdfColor.r + msdfColor.g + msdfColor.b -\n                    min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                    max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n            \n                // SDF\n                median = min(median, msdfColor.a);\n\n                var screenPxDistance = distance * (median - 0.5);\n                var alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                var luma: f32 = dot(shapeColor.rgb, vec3<f32>(0.299, 0.587, 0.114));\n                var gamma: f32 = mix(1.0, 1.0 / 2.2, luma);\n                var coverage: f32 = pow(shapeColor.a * alpha, gamma);\n\n                return coverage;\n             \n            }\n        `\n    )\n  }\n};\nconst mSDFBitGl = {\n  name: \"msdf-bit\",\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            float calculateMSDFAlpha(vec4 msdfColor, vec4 shapeColor, float distance) {\n                \n                // MSDF\n                float median = msdfColor.r + msdfColor.g + msdfColor.b -\n                                min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                                max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n               \n                // SDF\n                median = min(median, msdfColor.a);\n            \n                float screenPxDistance = distance * (median - 0.5);\n                float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n           \n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                float luma = dot(shapeColor.rgb, vec3(0.299, 0.587, 0.114));\n                float gamma = mix(1.0, 1.0 / 2.2, luma);\n                float coverage = pow(shapeColor.a * alpha, gamma);  \n              \n                return coverage;\n            }\n        `\n    )\n  }\n};\n\nexport { mSDFBit, mSDFBitGl };\n//# sourceMappingURL=mSDFBit.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { getMaxTexturesPerBatch } from '../../../rendering/batcher/gl/utils/maxRecommendedTextures.mjs';\nimport { compileHighShaderGpuProgram, compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram.mjs';\nimport { colorBit, colorBitGl } from '../../../rendering/high-shader/shader-bits/colorBit.mjs';\nimport { generateTextureBatchBit, generateTextureBatchBitGl } from '../../../rendering/high-shader/shader-bits/generateTextureBatchBit.mjs';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit.mjs';\nimport { getBatchSamplersUniformGroup } from '../../../rendering/renderers/gl/shader/getBatchSamplersUniformGroup.mjs';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { localUniformMSDFBit, localUniformMSDFBitGl } from './shader-bits/localUniformMSDFBit.mjs';\nimport { mSDFBit, mSDFBitGl } from './shader-bits/mSDFBit.mjs';\n\n\"use strict\";\nlet gpuProgram;\nlet glProgram;\nclass SdfShader extends Shader {\n  constructor() {\n    const uniforms = new UniformGroup({\n      uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n      uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uDistance: { value: 4, type: \"f32\" },\n      uRound: { value: 0, type: \"f32\" }\n    });\n    const maxTextures = getMaxTexturesPerBatch();\n    gpuProgram ?? (gpuProgram = compileHighShaderGpuProgram({\n      name: \"sdf-shader\",\n      bits: [\n        colorBit,\n        generateTextureBatchBit(maxTextures),\n        localUniformMSDFBit,\n        mSDFBit,\n        roundPixelsBit\n      ]\n    }));\n    glProgram ?? (glProgram = compileHighShaderGlProgram({\n      name: \"sdf-shader\",\n      bits: [\n        colorBitGl,\n        generateTextureBatchBitGl(maxTextures),\n        localUniformMSDFBitGl,\n        mSDFBitGl,\n        roundPixelsBitGl\n      ]\n    }));\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        localUniforms: uniforms,\n        batchSamplers: getBatchSamplersUniformGroup(maxTextures)\n      }\n    });\n  }\n}\n\nexport { SdfShader };\n//# sourceMappingURL=SdfShader.mjs.map\n","import { Cache } from '../../assets/cache/Cache.mjs';\nimport { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { Graphics } from '../graphics/shared/Graphics.mjs';\nimport { SdfShader } from '../text/sdfShader/SdfShader.mjs';\nimport { BitmapFontManager } from './BitmapFontManager.mjs';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout.mjs';\n\n\"use strict\";\nclass BitmapTextPipe {\n  constructor(renderer) {\n    this._gpuBitmapText = {};\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n    this._renderer.renderableGC.addManagedHash(this, \"_gpuBitmapText\");\n  }\n  validateRenderable(bitmapText) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    if (bitmapText._didTextUpdate) {\n      bitmapText._didTextUpdate = false;\n      this._updateContext(bitmapText, graphicsRenderable);\n    }\n    return this._renderer.renderPipes.graphics.validateRenderable(graphicsRenderable);\n  }\n  addRenderable(bitmapText, instructionSet) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    syncWithProxy(bitmapText, graphicsRenderable);\n    if (bitmapText._didTextUpdate) {\n      bitmapText._didTextUpdate = false;\n      this._updateContext(bitmapText, graphicsRenderable);\n    }\n    this._renderer.renderPipes.graphics.addRenderable(graphicsRenderable, instructionSet);\n    if (graphicsRenderable.context.customShader) {\n      this._updateDistanceField(bitmapText);\n    }\n  }\n  destroyRenderable(bitmapText) {\n    bitmapText.off(\"destroyed\", this._destroyRenderableBound);\n    this._destroyRenderableByUid(bitmapText.uid);\n  }\n  _destroyRenderableByUid(renderableUid) {\n    const context = this._gpuBitmapText[renderableUid].context;\n    if (context.customShader) {\n      BigPool.return(context.customShader);\n      context.customShader = null;\n    }\n    BigPool.return(this._gpuBitmapText[renderableUid]);\n    this._gpuBitmapText[renderableUid] = null;\n  }\n  updateRenderable(bitmapText) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    syncWithProxy(bitmapText, graphicsRenderable);\n    this._renderer.renderPipes.graphics.updateRenderable(graphicsRenderable);\n    if (graphicsRenderable.context.customShader) {\n      this._updateDistanceField(bitmapText);\n    }\n  }\n  _updateContext(bitmapText, proxyGraphics) {\n    const { context } = proxyGraphics;\n    const bitmapFont = BitmapFontManager.getFont(bitmapText.text, bitmapText._style);\n    context.clear();\n    if (bitmapFont.distanceField.type !== \"none\") {\n      if (!context.customShader) {\n        context.customShader = BigPool.get(SdfShader);\n      }\n    }\n    const chars = Array.from(bitmapText.text);\n    const style = bitmapText._style;\n    let currentY = bitmapFont.baseLineOffset;\n    const bitmapTextLayout = getBitmapTextLayout(chars, style, bitmapFont, true);\n    let index = 0;\n    const padding = style.padding;\n    const scale = bitmapTextLayout.scale;\n    let tx = bitmapTextLayout.width;\n    let ty = bitmapTextLayout.height + bitmapTextLayout.offsetY;\n    if (style._stroke) {\n      tx += style._stroke.width / scale;\n      ty += style._stroke.width / scale;\n    }\n    context.translate(-bitmapText._anchor._x * tx - padding, -bitmapText._anchor._y * ty - padding).scale(scale, scale);\n    const tint = bitmapFont.applyFillAsTint ? style._fill.color : 16777215;\n    for (let i = 0; i < bitmapTextLayout.lines.length; i++) {\n      const line = bitmapTextLayout.lines[i];\n      for (let j = 0; j < line.charPositions.length; j++) {\n        const char = chars[index++];\n        const charData = bitmapFont.chars[char];\n        if (charData?.texture) {\n          context.texture(\n            charData.texture,\n            tint ? tint : \"black\",\n            Math.round(line.charPositions[j] + charData.xOffset),\n            Math.round(currentY + charData.yOffset)\n          );\n        }\n      }\n      currentY += bitmapFont.lineHeight;\n    }\n  }\n  _getGpuBitmapText(bitmapText) {\n    return this._gpuBitmapText[bitmapText.uid] || this.initGpuText(bitmapText);\n  }\n  initGpuText(bitmapText) {\n    const proxyRenderable = BigPool.get(Graphics);\n    this._gpuBitmapText[bitmapText.uid] = proxyRenderable;\n    this._updateContext(bitmapText, proxyRenderable);\n    bitmapText.on(\"destroyed\", this._destroyRenderableBound);\n    return this._gpuBitmapText[bitmapText.uid];\n  }\n  _updateDistanceField(bitmapText) {\n    const context = this._getGpuBitmapText(bitmapText).context;\n    const fontFamily = bitmapText._style.fontFamily;\n    const dynamicFont = Cache.get(`${fontFamily}-bitmap`);\n    const { a, b, c, d } = bitmapText.groupTransform;\n    const dx = Math.sqrt(a * a + b * b);\n    const dy = Math.sqrt(c * c + d * d);\n    const worldScale = (Math.abs(dx) + Math.abs(dy)) / 2;\n    const fontScale = dynamicFont.baseRenderedFontSize / bitmapText._style.fontSize;\n    const distance = worldScale * dynamicFont.distanceField.range * (1 / fontScale);\n    context.customShader.resources.localUniforms.uniforms.uDistance = distance;\n  }\n  destroy() {\n    for (const uid in this._gpuBitmapText) {\n      this._destroyRenderableByUid(uid);\n    }\n    this._gpuBitmapText = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nBitmapTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"bitmapText\"\n};\nfunction syncWithProxy(container, proxy) {\n  proxy.groupTransform = container.groupTransform;\n  proxy.groupColorAlpha = container.groupColorAlpha;\n  proxy.groupColor = container.groupColor;\n  proxy.groupBlendMode = container.groupBlendMode;\n  proxy.globalDisplayStatus = container.globalDisplayStatus;\n  proxy.groupTransform = container.groupTransform;\n  proxy.localDisplayStatus = container.localDisplayStatus;\n  proxy.groupAlpha = container.groupAlpha;\n  proxy._roundPixels = container._roundPixels;\n}\n\nexport { BitmapTextPipe };\n//# sourceMappingURL=BitmapTextPipe.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { BitmapTextPipe } from './BitmapTextPipe.mjs';\n\n\"use strict\";\nextensions.add(BitmapTextPipe);\n//# sourceMappingURL=init.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { BatchableSprite } from '../../sprite/BatchableSprite.mjs';\nimport { updateTextBounds } from '../utils/updateTextBounds.mjs';\n\n\"use strict\";\nclass CanvasTextPipe {\n  constructor(renderer) {\n    this._gpuText = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n    this._renderer.runners.resolutionChange.add(this);\n    this._renderer.renderableGC.addManagedHash(this, \"_gpuText\");\n  }\n  resolutionChange() {\n    for (const i in this._gpuText) {\n      const gpuText = this._gpuText[i];\n      if (!gpuText)\n        continue;\n      const text = gpuText.batchableSprite.renderable;\n      if (text._autoResolution) {\n        text._resolution = this._renderer.resolution;\n        text.onViewUpdate();\n      }\n    }\n  }\n  validateRenderable(text) {\n    const gpuText = this._getGpuText(text);\n    const newKey = text._getKey();\n    if (gpuText.currentKey !== newKey) {\n      return true;\n    }\n    return false;\n  }\n  addRenderable(text, instructionSet) {\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (text._didTextUpdate) {\n      this._updateText(text);\n    }\n    this._renderer.renderPipes.batch.addToBatch(batchableSprite, instructionSet);\n  }\n  updateRenderable(text) {\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (text._didTextUpdate) {\n      this._updateText(text);\n    }\n    batchableSprite._batcher.updateElement(batchableSprite);\n  }\n  destroyRenderable(text) {\n    text.off(\"destroyed\", this._destroyRenderableBound);\n    this._destroyRenderableById(text.uid);\n  }\n  _destroyRenderableById(textUid) {\n    const gpuText = this._gpuText[textUid];\n    this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n    BigPool.return(gpuText.batchableSprite);\n    this._gpuText[textUid] = null;\n  }\n  _updateText(text) {\n    const newKey = text._getKey();\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (gpuText.currentKey !== newKey) {\n      this._updateGpuText(text);\n    }\n    text._didTextUpdate = false;\n    updateTextBounds(batchableSprite, text);\n  }\n  _updateGpuText(text) {\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (gpuText.texture) {\n      this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n    }\n    gpuText.texture = batchableSprite.texture = this._renderer.canvasText.getManagedTexture(text);\n    gpuText.currentKey = text._getKey();\n    batchableSprite.texture = gpuText.texture;\n  }\n  _getGpuText(text) {\n    return this._gpuText[text.uid] || this.initGpuText(text);\n  }\n  initGpuText(text) {\n    const gpuTextData = {\n      texture: null,\n      currentKey: \"--\",\n      batchableSprite: BigPool.get(BatchableSprite)\n    };\n    gpuTextData.batchableSprite.renderable = text;\n    gpuTextData.batchableSprite.transform = text.groupTransform;\n    gpuTextData.batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n    gpuTextData.batchableSprite.roundPixels = this._renderer._roundPixels | text._roundPixels;\n    this._gpuText[text.uid] = gpuTextData;\n    text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n    this._updateText(text);\n    text.on(\"destroyed\", this._destroyRenderableBound);\n    return gpuTextData;\n  }\n  destroy() {\n    for (const i in this._gpuText) {\n      this._destroyRenderableById(i);\n    }\n    this._gpuText = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nCanvasTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"text\"\n};\n\nexport { CanvasTextPipe };\n//# sourceMappingURL=CanvasTextPipe.mjs.map\n","import { Rectangle } from '../../maths/shapes/Rectangle.mjs';\n\n\"use strict\";\nfunction checkRow(data, width, y) {\n  for (let x = 0, index = 4 * y * width; x < width; ++x, index += 4) {\n    if (data[index + 3] !== 0)\n      return false;\n  }\n  return true;\n}\nfunction checkColumn(data, width, x, top, bottom) {\n  const stride = 4 * width;\n  for (let y = top, index = top * stride + 4 * x; y <= bottom; ++y, index += stride) {\n    if (data[index + 3] !== 0)\n      return false;\n  }\n  return true;\n}\nfunction getCanvasBoundingBox(canvas, resolution = 1) {\n  const { width, height } = canvas;\n  const context = canvas.getContext(\"2d\", {\n    willReadFrequently: true\n  });\n  if (context === null) {\n    throw new TypeError(\"Failed to get canvas 2D context\");\n  }\n  const imageData = context.getImageData(0, 0, width, height);\n  const data = imageData.data;\n  let left = 0;\n  let top = 0;\n  let right = width - 1;\n  let bottom = height - 1;\n  while (top < height && checkRow(data, width, top))\n    ++top;\n  if (top === height)\n    return Rectangle.EMPTY;\n  while (checkRow(data, width, bottom))\n    --bottom;\n  while (checkColumn(data, width, left, top, bottom))\n    ++left;\n  while (checkColumn(data, width, right, top, bottom))\n    --right;\n  ++right;\n  ++bottom;\n  return new Rectangle(left / resolution, top / resolution, (right - left) / resolution, (bottom - top) / resolution);\n}\n\nexport { getCanvasBoundingBox };\n//# sourceMappingURL=getCanvasBoundingBox.mjs.map\n","import { Color } from '../../../color/Color.mjs';\nimport { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { nextPow2 } from '../../../maths/misc/pow2.mjs';\nimport { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool.mjs';\nimport { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { getCanvasBoundingBox } from '../../../utils/canvas/getCanvasBoundingBox.mjs';\nimport { deprecation } from '../../../utils/logging/deprecation.mjs';\nimport { TextStyle } from '../TextStyle.mjs';\nimport { getPo2TextureFromSource } from '../utils/getPo2TextureFromSource.mjs';\nimport { CanvasTextMetrics } from './CanvasTextMetrics.mjs';\nimport { fontStringFromTextStyle } from './utils/fontStringFromTextStyle.mjs';\nimport { getCanvasFillStyle } from './utils/getCanvasFillStyle.mjs';\n\n\"use strict\";\nclass CanvasTextSystem {\n  constructor(_renderer) {\n    this._activeTextures = {};\n    this._renderer = _renderer;\n  }\n  getTextureSize(text, resolution, style) {\n    const measured = CanvasTextMetrics.measureText(text || \" \", style);\n    let width = Math.ceil(Math.ceil(Math.max(1, measured.width) + style.padding * 2) * resolution);\n    let height = Math.ceil(Math.ceil(Math.max(1, measured.height) + style.padding * 2) * resolution);\n    width = Math.ceil(width - 1e-6);\n    height = Math.ceil(height - 1e-6);\n    width = nextPow2(width);\n    height = nextPow2(height);\n    return { width, height };\n  }\n  getTexture(options, resolution, style, _textKey) {\n    if (typeof options === \"string\") {\n      deprecation(\"8.0.0\", \"CanvasTextSystem.getTexture: Use object TextOptions instead of separate arguments\");\n      options = {\n        text: options,\n        style,\n        resolution\n      };\n    }\n    if (!(options.style instanceof TextStyle)) {\n      options.style = new TextStyle(options.style);\n    }\n    const { texture, canvasAndContext } = this.createTextureAndCanvas(\n      options\n    );\n    this._renderer.texture.initSource(texture._source);\n    CanvasPool.returnCanvasAndContext(canvasAndContext);\n    return texture;\n  }\n  createTextureAndCanvas(options) {\n    const { text, style } = options;\n    const resolution = options.resolution ?? this._renderer.resolution;\n    const measured = CanvasTextMetrics.measureText(text || \" \", style);\n    const width = Math.ceil(Math.ceil(Math.max(1, measured.width) + style.padding * 2) * resolution);\n    const height = Math.ceil(Math.ceil(Math.max(1, measured.height) + style.padding * 2) * resolution);\n    const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(width, height);\n    const { canvas } = canvasAndContext;\n    this.renderTextToCanvas(text, style, resolution, canvasAndContext);\n    const texture = getPo2TextureFromSource(canvas, width, height, resolution);\n    if (style.trim) {\n      const trimmed = getCanvasBoundingBox(canvas, resolution);\n      texture.frame.copyFrom(trimmed);\n      texture.updateUvs();\n    }\n    return { texture, canvasAndContext };\n  }\n  getManagedTexture(text) {\n    text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n    const textKey = text._getKey();\n    if (this._activeTextures[textKey]) {\n      this._increaseReferenceCount(textKey);\n      return this._activeTextures[textKey].texture;\n    }\n    const { texture, canvasAndContext } = this.createTextureAndCanvas(text);\n    this._activeTextures[textKey] = {\n      canvasAndContext,\n      texture,\n      usageCount: 1\n    };\n    return texture;\n  }\n  _increaseReferenceCount(textKey) {\n    this._activeTextures[textKey].usageCount++;\n  }\n  /**\n   * Returns a texture that was created wit the above `getTexture` function.\n   * Handy if you are done with a texture and want to return it to the pool.\n   * @param texture - The texture to be returned.\n   */\n  returnTexture(texture) {\n    const source = texture.source;\n    source.resource = null;\n    source.uploadMethodId = \"unknown\";\n    source.alphaMode = \"no-premultiply-alpha\";\n    TexturePool.returnTexture(texture);\n  }\n  decreaseReferenceCount(textKey) {\n    const activeTexture = this._activeTextures[textKey];\n    activeTexture.usageCount--;\n    if (activeTexture.usageCount === 0) {\n      CanvasPool.returnCanvasAndContext(activeTexture.canvasAndContext);\n      this.returnTexture(activeTexture.texture);\n      this._activeTextures[textKey] = null;\n    }\n  }\n  getReferenceCount(textKey) {\n    return this._activeTextures[textKey].usageCount;\n  }\n  /**\n   * Renders text to its canvas, and updates its texture.\n   *\n   * By default this is used internally to ensure the texture is correct before rendering,\n   * but it can be used called externally, for example from this class to 'pre-generate' the texture from a piece of text,\n   * and then shared across multiple Sprites.\n   * @param text\n   * @param style\n   * @param resolution\n   * @param canvasAndContext\n   */\n  renderTextToCanvas(text, style, resolution, canvasAndContext) {\n    const { canvas, context } = canvasAndContext;\n    const font = fontStringFromTextStyle(style);\n    const measured = CanvasTextMetrics.measureText(text || \" \", style);\n    const lines = measured.lines;\n    const lineHeight = measured.lineHeight;\n    const lineWidths = measured.lineWidths;\n    const maxLineWidth = measured.maxLineWidth;\n    const fontProperties = measured.fontProperties;\n    const height = canvas.height;\n    context.resetTransform();\n    context.scale(resolution, resolution);\n    context.textBaseline = style.textBaseline;\n    if (style._stroke?.width) {\n      const strokeStyle = style._stroke;\n      context.lineWidth = strokeStyle.width;\n      context.miterLimit = strokeStyle.miterLimit;\n      context.lineJoin = strokeStyle.join;\n      context.lineCap = strokeStyle.cap;\n    }\n    context.font = font;\n    let linePositionX;\n    let linePositionY;\n    const passesCount = style.dropShadow ? 2 : 1;\n    for (let i = 0; i < passesCount; ++i) {\n      const isShadowPass = style.dropShadow && i === 0;\n      const dsOffsetText = isShadowPass ? Math.ceil(Math.max(1, height) + style.padding * 2) : 0;\n      const dsOffsetShadow = dsOffsetText * resolution;\n      if (isShadowPass) {\n        context.fillStyle = \"black\";\n        context.strokeStyle = \"black\";\n        const shadowOptions = style.dropShadow;\n        const dropShadowColor = shadowOptions.color;\n        const dropShadowAlpha = shadowOptions.alpha;\n        context.shadowColor = Color.shared.setValue(dropShadowColor).setAlpha(dropShadowAlpha).toRgbaString();\n        const dropShadowBlur = shadowOptions.blur * resolution;\n        const dropShadowDistance = shadowOptions.distance * resolution;\n        context.shadowBlur = dropShadowBlur;\n        context.shadowOffsetX = Math.cos(shadowOptions.angle) * dropShadowDistance;\n        context.shadowOffsetY = Math.sin(shadowOptions.angle) * dropShadowDistance + dsOffsetShadow;\n      } else {\n        context.fillStyle = style._fill ? getCanvasFillStyle(style._fill, context, measured) : null;\n        if (style._stroke?.width) {\n          const padding = style._stroke.width * style._stroke.alignment;\n          context.strokeStyle = getCanvasFillStyle(style._stroke, context, measured, padding);\n        }\n        context.shadowColor = \"black\";\n      }\n      let linePositionYShift = (lineHeight - fontProperties.fontSize) / 2;\n      if (lineHeight - fontProperties.fontSize < 0) {\n        linePositionYShift = 0;\n      }\n      const strokeWidth = style._stroke?.width ?? 0;\n      for (let i2 = 0; i2 < lines.length; i2++) {\n        linePositionX = strokeWidth / 2;\n        linePositionY = strokeWidth / 2 + i2 * lineHeight + fontProperties.ascent + linePositionYShift;\n        if (style.align === \"right\") {\n          linePositionX += maxLineWidth - lineWidths[i2];\n        } else if (style.align === \"center\") {\n          linePositionX += (maxLineWidth - lineWidths[i2]) / 2;\n        }\n        if (style._stroke?.width) {\n          this._drawLetterSpacing(\n            lines[i2],\n            style,\n            canvasAndContext,\n            linePositionX + style.padding,\n            linePositionY + style.padding - dsOffsetText,\n            true\n          );\n        }\n        if (style._fill !== void 0) {\n          this._drawLetterSpacing(\n            lines[i2],\n            style,\n            canvasAndContext,\n            linePositionX + style.padding,\n            linePositionY + style.padding - dsOffsetText\n          );\n        }\n      }\n    }\n  }\n  /**\n   * Render the text with letter-spacing.\n   * @param text - The text to draw\n   * @param style\n   * @param canvasAndContext\n   * @param x - Horizontal position to draw the text\n   * @param y - Vertical position to draw the text\n   * @param isStroke - Is this drawing for the outside stroke of the\n   *  text? If not, it's for the inside fill\n   */\n  _drawLetterSpacing(text, style, canvasAndContext, x, y, isStroke = false) {\n    const { context } = canvasAndContext;\n    const letterSpacing = style.letterSpacing;\n    let useExperimentalLetterSpacing = false;\n    if (CanvasTextMetrics.experimentalLetterSpacingSupported) {\n      if (CanvasTextMetrics.experimentalLetterSpacing) {\n        context.letterSpacing = `${letterSpacing}px`;\n        context.textLetterSpacing = `${letterSpacing}px`;\n        useExperimentalLetterSpacing = true;\n      } else {\n        context.letterSpacing = \"0px\";\n        context.textLetterSpacing = \"0px\";\n      }\n    }\n    if (letterSpacing === 0 || useExperimentalLetterSpacing) {\n      if (isStroke) {\n        context.strokeText(text, x, y);\n      } else {\n        context.fillText(text, x, y);\n      }\n      return;\n    }\n    let currentPosition = x;\n    const stringArray = CanvasTextMetrics.graphemeSegmenter(text);\n    let previousWidth = context.measureText(text).width;\n    let currentWidth = 0;\n    for (let i = 0; i < stringArray.length; ++i) {\n      const currentChar = stringArray[i];\n      if (isStroke) {\n        context.strokeText(currentChar, currentPosition, y);\n      } else {\n        context.fillText(currentChar, currentPosition, y);\n      }\n      let textStr = \"\";\n      for (let j = i + 1; j < stringArray.length; ++j) {\n        textStr += stringArray[j];\n      }\n      currentWidth = context.measureText(textStr).width;\n      currentPosition += previousWidth - currentWidth + letterSpacing;\n      previousWidth = currentWidth;\n    }\n  }\n  destroy() {\n    this._activeTextures = null;\n  }\n}\n/** @ignore */\nCanvasTextSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"canvasText\"\n};\n\nexport { CanvasTextSystem };\n//# sourceMappingURL=CanvasTextSystem.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { CanvasTextPipe } from './canvas/CanvasTextPipe.mjs';\nimport { CanvasTextSystem } from './canvas/CanvasTextSystem.mjs';\n\n\"use strict\";\nextensions.add(CanvasTextSystem);\nextensions.add(CanvasTextPipe);\n//# sourceMappingURL=init.mjs.map\n","import { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry.mjs';\n\n\"use strict\";\nconst _PlaneGeometry = class _PlaneGeometry extends MeshGeometry {\n  constructor(...args) {\n    super({});\n    let options = args[0] ?? {};\n    if (typeof options === \"number\") {\n      deprecation(v8_0_0, \"PlaneGeometry constructor changed please use { width, height, verticesX, verticesY } instead\");\n      options = {\n        width: options,\n        height: args[1],\n        verticesX: args[2],\n        verticesY: args[3]\n      };\n    }\n    this.build(options);\n  }\n  /**\n   * Refreshes plane coordinates\n   * @param options - Options to be applied to plane geometry\n   */\n  build(options) {\n    options = { ..._PlaneGeometry.defaultOptions, ...options };\n    this.verticesX = this.verticesX ?? options.verticesX;\n    this.verticesY = this.verticesY ?? options.verticesY;\n    this.width = this.width ?? options.width;\n    this.height = this.height ?? options.height;\n    const total = this.verticesX * this.verticesY;\n    const verts = [];\n    const uvs = [];\n    const indices = [];\n    const verticesX = this.verticesX - 1;\n    const verticesY = this.verticesY - 1;\n    const sizeX = this.width / verticesX;\n    const sizeY = this.height / verticesY;\n    for (let i = 0; i < total; i++) {\n      const x = i % this.verticesX;\n      const y = i / this.verticesX | 0;\n      verts.push(x * sizeX, y * sizeY);\n      uvs.push(x / verticesX, y / verticesY);\n    }\n    const totalSub = verticesX * verticesY;\n    for (let i = 0; i < totalSub; i++) {\n      const xpos = i % verticesX;\n      const ypos = i / verticesX | 0;\n      const value = ypos * this.verticesX + xpos;\n      const value2 = ypos * this.verticesX + xpos + 1;\n      const value3 = (ypos + 1) * this.verticesX + xpos;\n      const value4 = (ypos + 1) * this.verticesX + xpos + 1;\n      indices.push(\n        value,\n        value2,\n        value3,\n        value2,\n        value4,\n        value3\n      );\n    }\n    this.buffers[0].data = new Float32Array(verts);\n    this.buffers[1].data = new Float32Array(uvs);\n    this.indexBuffer.data = new Uint32Array(indices);\n    this.buffers[0].update();\n    this.buffers[1].update();\n    this.indexBuffer.update();\n  }\n};\n_PlaneGeometry.defaultOptions = {\n  width: 100,\n  height: 100,\n  verticesX: 10,\n  verticesY: 10\n};\nlet PlaneGeometry = _PlaneGeometry;\n\nexport { PlaneGeometry };\n//# sourceMappingURL=PlaneGeometry.mjs.map\n","import { PlaneGeometry } from '../mesh-plane/PlaneGeometry.mjs';\n\n\"use strict\";\nconst _NineSliceGeometry = class _NineSliceGeometry extends PlaneGeometry {\n  constructor(options = {}) {\n    options = { ..._NineSliceGeometry.defaultOptions, ...options };\n    super({\n      width: options.width,\n      height: options.height,\n      verticesX: 4,\n      verticesY: 4\n    });\n    this.update(options);\n  }\n  /**\n   * Updates the NineSliceGeometry with the options.\n   * @param options - The options of the NineSliceGeometry.\n   */\n  update(options) {\n    this.width = options.width ?? this.width;\n    this.height = options.height ?? this.height;\n    this._originalWidth = options.originalWidth ?? this._originalWidth;\n    this._originalHeight = options.originalHeight ?? this._originalHeight;\n    this._leftWidth = options.leftWidth ?? this._leftWidth;\n    this._rightWidth = options.rightWidth ?? this._rightWidth;\n    this._topHeight = options.topHeight ?? this._topHeight;\n    this._bottomHeight = options.bottomHeight ?? this._bottomHeight;\n    this._anchorX = options.anchor?.x;\n    this._anchorY = options.anchor?.y;\n    this.updateUvs();\n    this.updatePositions();\n  }\n  /** Updates the positions of the vertices. */\n  updatePositions() {\n    const p = this.positions;\n    const {\n      width,\n      height,\n      _leftWidth,\n      _rightWidth,\n      _topHeight,\n      _bottomHeight,\n      _anchorX,\n      _anchorY\n    } = this;\n    const w = _leftWidth + _rightWidth;\n    const scaleW = width > w ? 1 : width / w;\n    const h = _topHeight + _bottomHeight;\n    const scaleH = height > h ? 1 : height / h;\n    const scale = Math.min(scaleW, scaleH);\n    const anchorOffsetX = _anchorX * width;\n    const anchorOffsetY = _anchorY * height;\n    p[0] = p[8] = p[16] = p[24] = -anchorOffsetX;\n    p[2] = p[10] = p[18] = p[26] = _leftWidth * scale - anchorOffsetX;\n    p[4] = p[12] = p[20] = p[28] = width - _rightWidth * scale - anchorOffsetX;\n    p[6] = p[14] = p[22] = p[30] = width - anchorOffsetX;\n    p[1] = p[3] = p[5] = p[7] = -anchorOffsetY;\n    p[9] = p[11] = p[13] = p[15] = _topHeight * scale - anchorOffsetY;\n    p[17] = p[19] = p[21] = p[23] = height - _bottomHeight * scale - anchorOffsetY;\n    p[25] = p[27] = p[29] = p[31] = height - anchorOffsetY;\n    this.getBuffer(\"aPosition\").update();\n  }\n  /** Updates the UVs of the vertices. */\n  updateUvs() {\n    const uvs = this.uvs;\n    uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n    uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n    uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n    uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n    const _uvw = 1 / this._originalWidth;\n    const _uvh = 1 / this._originalHeight;\n    uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n    uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n    uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - _uvw * this._rightWidth;\n    uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - _uvh * this._bottomHeight;\n    this.getBuffer(\"aUV\").update();\n  }\n};\n/** The default options for the NineSliceGeometry. */\n_NineSliceGeometry.defaultOptions = {\n  /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n  width: 100,\n  /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n  height: 100,\n  /** The width of the left column. */\n  leftWidth: 10,\n  /** The height of the top row. */\n  topHeight: 10,\n  /** The width of the right column. */\n  rightWidth: 10,\n  /** The height of the bottom row. */\n  bottomHeight: 10,\n  /** The original width of the texture */\n  originalWidth: 100,\n  /** The original height of the texture */\n  originalHeight: 100\n};\nlet NineSliceGeometry = _NineSliceGeometry;\n\nexport { NineSliceGeometry };\n//# sourceMappingURL=NineSliceGeometry.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh.mjs';\nimport { NineSliceGeometry } from './NineSliceGeometry.mjs';\n\n\"use strict\";\nclass NineSliceSpritePipe {\n  constructor(renderer) {\n    this._gpuSpriteHash = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n    this._renderer.renderableGC.addManagedHash(this, \"_gpuSpriteHash\");\n  }\n  addRenderable(sprite, instructionSet) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (sprite.didViewUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    this._renderer.renderPipes.batch.addToBatch(gpuSprite, instructionSet);\n  }\n  updateRenderable(sprite) {\n    const gpuSprite = this._gpuSpriteHash[sprite.uid];\n    if (sprite.didViewUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    gpuSprite._batcher.updateElement(gpuSprite);\n  }\n  validateRenderable(sprite) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    return !gpuSprite._batcher.checkAndUpdateTexture(\n      gpuSprite,\n      sprite._texture\n    );\n  }\n  destroyRenderable(sprite) {\n    const batchableMesh = this._gpuSpriteHash[sprite.uid];\n    BigPool.return(batchableMesh.geometry);\n    BigPool.return(batchableMesh);\n    this._gpuSpriteHash[sprite.uid] = null;\n    sprite.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  _updateBatchableSprite(sprite, batchableSprite) {\n    batchableSprite.geometry.update(sprite);\n    batchableSprite.setTexture(sprite._texture);\n  }\n  _getGpuSprite(sprite) {\n    return this._gpuSpriteHash[sprite.uid] || this._initGPUSprite(sprite);\n  }\n  _initGPUSprite(sprite) {\n    const batchableMesh = BigPool.get(BatchableMesh);\n    batchableMesh.geometry = BigPool.get(NineSliceGeometry);\n    batchableMesh.renderable = sprite;\n    batchableMesh.transform = sprite.groupTransform;\n    batchableMesh.texture = sprite._texture;\n    batchableMesh.roundPixels = this._renderer._roundPixels | sprite._roundPixels;\n    this._gpuSpriteHash[sprite.uid] = batchableMesh;\n    if (!sprite.didViewUpdate) {\n      this._updateBatchableSprite(sprite, batchableMesh);\n    }\n    sprite.on(\"destroyed\", this._destroyRenderableBound);\n    return batchableMesh;\n  }\n  destroy() {\n    for (const i in this._gpuSpriteHash) {\n      const batchableMesh = this._gpuSpriteHash[i];\n      batchableMesh.geometry.destroy();\n    }\n    this._gpuSpriteHash = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nNineSliceSpritePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"nineSliceSprite\"\n};\n\nexport { NineSliceSpritePipe };\n//# sourceMappingURL=NineSliceSpritePipe.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { NineSliceSpritePipe } from './NineSliceSpritePipe.mjs';\n\n\"use strict\";\nextensions.add(NineSliceSpritePipe);\n//# sourceMappingURL=init.mjs.map\n","\"use strict\";\nconst blendModeIds = {\n  normal: 0,\n  add: 1,\n  multiply: 2,\n  screen: 3,\n  overlay: 4,\n  erase: 5,\n  \"normal-npm\": 6,\n  \"add-npm\": 7,\n  \"screen-npm\": 8,\n  min: 9,\n  max: 10\n};\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\nconst DEPTH_MASK = 5;\nconst _State = class _State {\n  constructor() {\n    this.data = 0;\n    this.blendMode = \"normal\";\n    this.polygonOffset = 0;\n    this.blend = true;\n    this.depthMask = true;\n  }\n  /**\n   * Activates blending of the computed fragment color values.\n   * @default true\n   */\n  get blend() {\n    return !!(this.data & 1 << BLEND);\n  }\n  set blend(value) {\n    if (!!(this.data & 1 << BLEND) !== value) {\n      this.data ^= 1 << BLEND;\n    }\n  }\n  /**\n   * Activates adding an offset to depth values of polygon's fragments\n   * @default false\n   */\n  get offsets() {\n    return !!(this.data & 1 << OFFSET);\n  }\n  set offsets(value) {\n    if (!!(this.data & 1 << OFFSET) !== value) {\n      this.data ^= 1 << OFFSET;\n    }\n  }\n  /** The culling settings for this state none - No culling back - Back face culling front - Front face culling */\n  set cullMode(value) {\n    if (value === \"none\") {\n      this.culling = false;\n      return;\n    }\n    this.culling = true;\n    this.clockwiseFrontFace = value === \"front\";\n  }\n  get cullMode() {\n    if (!this.culling) {\n      return \"none\";\n    }\n    return this.clockwiseFrontFace ? \"front\" : \"back\";\n  }\n  /**\n   * Activates culling of polygons.\n   * @default false\n   */\n  get culling() {\n    return !!(this.data & 1 << CULLING);\n  }\n  set culling(value) {\n    if (!!(this.data & 1 << CULLING) !== value) {\n      this.data ^= 1 << CULLING;\n    }\n  }\n  /**\n   * Activates depth comparisons and updates to the depth buffer.\n   * @default false\n   */\n  get depthTest() {\n    return !!(this.data & 1 << DEPTH_TEST);\n  }\n  set depthTest(value) {\n    if (!!(this.data & 1 << DEPTH_TEST) !== value) {\n      this.data ^= 1 << DEPTH_TEST;\n    }\n  }\n  /**\n   * Enables or disables writing to the depth buffer.\n   * @default true\n   */\n  get depthMask() {\n    return !!(this.data & 1 << DEPTH_MASK);\n  }\n  set depthMask(value) {\n    if (!!(this.data & 1 << DEPTH_MASK) !== value) {\n      this.data ^= 1 << DEPTH_MASK;\n    }\n  }\n  /**\n   * Specifies whether or not front or back-facing polygons can be culled.\n   * @default false\n   */\n  get clockwiseFrontFace() {\n    return !!(this.data & 1 << WINDING);\n  }\n  set clockwiseFrontFace(value) {\n    if (!!(this.data & 1 << WINDING) !== value) {\n      this.data ^= 1 << WINDING;\n    }\n  }\n  /**\n   * The blend mode to be applied when this state is set. Apply a value of `normal` to reset the blend mode.\n   * Setting this mode to anything other than NO_BLEND will automatically switch blending on.\n   * @default 'normal'\n   */\n  get blendMode() {\n    return this._blendMode;\n  }\n  set blendMode(value) {\n    this.blend = value !== \"none\";\n    this._blendMode = value;\n    this._blendModeId = blendModeIds[value] || 0;\n  }\n  /**\n   * The polygon offset. Setting this property to anything other than 0 will automatically enable polygon offset fill.\n   * @default 0\n   */\n  get polygonOffset() {\n    return this._polygonOffset;\n  }\n  set polygonOffset(value) {\n    this.offsets = !!value;\n    this._polygonOffset = value;\n  }\n  toString() {\n    return `[pixi.js/core:State blendMode=${this.blendMode} clockwiseFrontFace=${this.clockwiseFrontFace} culling=${this.culling} depthMask=${this.depthMask} polygonOffset=${this.polygonOffset}]`;\n  }\n  /**\n   * A quickly getting an instance of a State that is configured for 2d rendering.\n   * @returns a new State with values set for 2d rendering\n   */\n  static for2d() {\n    const state = new _State();\n    state.depthTest = false;\n    state.blend = true;\n    return state;\n  }\n};\n_State.default2d = _State.for2d();\nlet State = _State;\n\nexport { State };\n//# sourceMappingURL=State.mjs.map\n","\"use strict\";\nclass BatchableSprite {\n  constructor() {\n    this.batcherName = \"default\";\n    this.topology = \"triangle-list\";\n    // batch specific..\n    this.attributeSize = 4;\n    this.indexSize = 6;\n    this.packAsQuad = true;\n    this.roundPixels = 0;\n    this._attributeStart = 0;\n    // location in the buffer\n    this._batcher = null;\n    this._batch = null;\n  }\n  get blendMode() {\n    return this.renderable.groupBlendMode;\n  }\n  get color() {\n    return this.renderable.groupColorAlpha;\n  }\n  reset() {\n    this.renderable = null;\n    this.texture = null;\n    this._batcher = null;\n    this._batch = null;\n    this.bounds = null;\n  }\n}\n\nexport { BatchableSprite };\n//# sourceMappingURL=BatchableSprite.mjs.map\n","\"use strict\";\nconst tilingBit = {\n  name: \"tiling-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            uv = (tilingUniforms.uTextureTransform * vec3(uv, 1.0)).xy;\n\n            position = (position - tilingUniforms.uSizeAnchor.zw) * tilingUniforms.uSizeAnchor.xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n\n            var coord = vUV + ceil(tilingUniforms.uClampOffset - vUV);\n            coord = (tilingUniforms.uMapCoord * vec3(coord, 1.0)).xy;\n            var unclamped = coord;\n            coord = clamp(coord, tilingUniforms.uClampFrame.xy, tilingUniforms.uClampFrame.zw);\n\n            var bias = 0.;\n\n            if(unclamped.x == coord.x && unclamped.y == coord.y)\n            {\n                bias = -32.;\n            } \n\n            outColor = textureSampleBias(uTexture, uSampler, coord, bias);\n        `\n    )\n  }\n};\nconst tilingBitGl = {\n  name: \"tiling-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n            uniform mat3 uTextureTransform;\n            uniform vec4 uSizeAnchor;\n        \n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            uv = (uTextureTransform * vec3(aUV, 1.0)).xy;\n\n            position = (position - uSizeAnchor.zw) * uSizeAnchor.xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            uniform sampler2D uTexture;\n            uniform mat3 uMapCoord;\n            uniform vec4 uClampFrame;\n            uniform vec2 uClampOffset;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n\n        vec2 coord = vUV + ceil(uClampOffset - vUV);\n        coord = (uMapCoord * vec3(coord, 1.0)).xy;\n        vec2 unclamped = coord;\n        coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\n        \n        outColor = texture(uTexture, coord, unclamped == coord ? 0.0 : -32.0);// lod-bias very negative to force lod 0\n    \n        `\n    )\n  }\n};\n\nexport { tilingBit, tilingBitGl };\n//# sourceMappingURL=tilingBit.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { compileHighShaderGpuProgram, compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram.mjs';\nimport { localUniformBit, localUniformBitGl } from '../../../rendering/high-shader/shader-bits/localUniformBit.mjs';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit.mjs';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { tilingBit, tilingBitGl } from './tilingBit.mjs';\n\n\"use strict\";\nlet gpuProgram;\nlet glProgram;\nclass TilingSpriteShader extends Shader {\n  constructor() {\n    gpuProgram ?? (gpuProgram = compileHighShaderGpuProgram({\n      name: \"tiling-sprite-shader\",\n      bits: [\n        localUniformBit,\n        tilingBit,\n        roundPixelsBit\n      ]\n    }));\n    glProgram ?? (glProgram = compileHighShaderGlProgram({\n      name: \"tiling-sprite-shader\",\n      bits: [\n        localUniformBitGl,\n        tilingBitGl,\n        roundPixelsBitGl\n      ]\n    }));\n    const tilingUniforms = new UniformGroup({\n      uMapCoord: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uClampFrame: { value: new Float32Array([0, 0, 1, 1]), type: \"vec4<f32>\" },\n      uClampOffset: { value: new Float32Array([0, 0]), type: \"vec2<f32>\" },\n      uTextureTransform: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uSizeAnchor: { value: new Float32Array([100, 100, 0.5, 0.5]), type: \"vec4<f32>\" }\n    });\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        localUniforms: new UniformGroup({\n          uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n          uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n          uRound: { value: 0, type: \"f32\" }\n        }),\n        tilingUniforms,\n        uTexture: Texture.EMPTY.source,\n        uSampler: Texture.EMPTY.source.style\n      }\n    });\n  }\n  updateUniforms(width, height, matrix, anchorX, anchorY, texture) {\n    const tilingUniforms = this.resources.tilingUniforms;\n    const textureWidth = texture.width;\n    const textureHeight = texture.height;\n    const textureMatrix = texture.textureMatrix;\n    const uTextureTransform = tilingUniforms.uniforms.uTextureTransform;\n    uTextureTransform.set(\n      matrix.a * textureWidth / width,\n      matrix.b * textureWidth / height,\n      matrix.c * textureHeight / width,\n      matrix.d * textureHeight / height,\n      matrix.tx / width,\n      matrix.ty / height\n    );\n    uTextureTransform.invert();\n    tilingUniforms.uniforms.uMapCoord = textureMatrix.mapCoord;\n    tilingUniforms.uniforms.uClampFrame = textureMatrix.uClampFrame;\n    tilingUniforms.uniforms.uClampOffset = textureMatrix.uClampOffset;\n    tilingUniforms.uniforms.uTextureTransform = uTextureTransform;\n    tilingUniforms.uniforms.uSizeAnchor[0] = width;\n    tilingUniforms.uniforms.uSizeAnchor[1] = height;\n    tilingUniforms.uniforms.uSizeAnchor[2] = anchorX;\n    tilingUniforms.uniforms.uSizeAnchor[3] = anchorY;\n    if (texture) {\n      this.resources.uTexture = texture.source;\n      this.resources.uSampler = texture.source.style;\n    }\n  }\n}\n\nexport { TilingSpriteShader };\n//# sourceMappingURL=TilingSpriteShader.mjs.map\n","import { MeshGeometry } from '../../mesh/shared/MeshGeometry.mjs';\n\n\"use strict\";\nclass QuadGeometry extends MeshGeometry {\n  constructor() {\n    super({\n      positions: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      uvs: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      indices: new Uint32Array([0, 1, 2, 0, 2, 3])\n    });\n  }\n}\n\nexport { QuadGeometry };\n//# sourceMappingURL=QuadGeometry.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { getAdjustedBlendModeBlend } from '../../rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs';\nimport { State } from '../../rendering/renderers/shared/state/State.mjs';\nimport { RendererType } from '../../rendering/renderers/types.mjs';\nimport { color32BitToUniform } from '../graphics/gpu/colorToUniform.mjs';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh.mjs';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry.mjs';\nimport { TilingSpriteShader } from './shader/TilingSpriteShader.mjs';\nimport { QuadGeometry } from './utils/QuadGeometry.mjs';\nimport { setPositions } from './utils/setPositions.mjs';\nimport { setUvs } from './utils/setUvs.mjs';\n\n\"use strict\";\nconst sharedQuad = new QuadGeometry();\nclass TilingSpritePipe {\n  constructor(renderer) {\n    this._state = State.default2d;\n    this._tilingSpriteDataHash = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n    this._renderer.renderableGC.addManagedHash(this, \"_tilingSpriteDataHash\");\n  }\n  validateRenderable(renderable) {\n    const tilingSpriteData = this._getTilingSpriteData(renderable);\n    const couldBatch = tilingSpriteData.canBatch;\n    this._updateCanBatch(renderable);\n    const canBatch = tilingSpriteData.canBatch;\n    if (canBatch && canBatch === couldBatch) {\n      const { batchableMesh } = tilingSpriteData;\n      return !batchableMesh._batcher.checkAndUpdateTexture(\n        batchableMesh,\n        renderable.texture\n      );\n    }\n    return couldBatch !== canBatch;\n  }\n  addRenderable(tilingSprite, instructionSet) {\n    const batcher = this._renderer.renderPipes.batch;\n    this._updateCanBatch(tilingSprite);\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    const { geometry, canBatch } = tilingSpriteData;\n    if (canBatch) {\n      tilingSpriteData.batchableMesh || (tilingSpriteData.batchableMesh = new BatchableMesh());\n      const batchableMesh = tilingSpriteData.batchableMesh;\n      if (tilingSprite.didViewUpdate) {\n        this._updateBatchableMesh(tilingSprite);\n        batchableMesh.geometry = geometry;\n        batchableMesh.renderable = tilingSprite;\n        batchableMesh.transform = tilingSprite.groupTransform;\n        batchableMesh.setTexture(tilingSprite._texture);\n      }\n      batchableMesh.roundPixels = this._renderer._roundPixels | tilingSprite._roundPixels;\n      batcher.addToBatch(batchableMesh, instructionSet);\n    } else {\n      batcher.break(instructionSet);\n      tilingSpriteData.shader || (tilingSpriteData.shader = new TilingSpriteShader());\n      this.updateRenderable(tilingSprite);\n      instructionSet.add(tilingSprite);\n    }\n  }\n  execute(tilingSprite) {\n    const { shader } = this._tilingSpriteDataHash[tilingSprite.uid];\n    shader.groups[0] = this._renderer.globalUniforms.bindGroup;\n    const localUniforms = shader.resources.localUniforms.uniforms;\n    localUniforms.uTransformMatrix = tilingSprite.groupTransform;\n    localUniforms.uRound = this._renderer._roundPixels | tilingSprite._roundPixels;\n    color32BitToUniform(\n      tilingSprite.groupColorAlpha,\n      localUniforms.uColor,\n      0\n    );\n    this._state.blendMode = getAdjustedBlendModeBlend(tilingSprite.groupBlendMode, tilingSprite.texture._source);\n    this._renderer.encoder.draw({\n      geometry: sharedQuad,\n      shader,\n      state: this._state\n    });\n  }\n  updateRenderable(tilingSprite) {\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    const { canBatch } = tilingSpriteData;\n    if (canBatch) {\n      const { batchableMesh } = tilingSpriteData;\n      if (tilingSprite.didViewUpdate)\n        this._updateBatchableMesh(tilingSprite);\n      batchableMesh._batcher.updateElement(batchableMesh);\n    } else if (tilingSprite.didViewUpdate) {\n      const { shader } = tilingSpriteData;\n      shader.updateUniforms(\n        tilingSprite.width,\n        tilingSprite.height,\n        tilingSprite._tileTransform.matrix,\n        tilingSprite.anchor.x,\n        tilingSprite.anchor.y,\n        tilingSprite.texture\n      );\n    }\n  }\n  destroyRenderable(tilingSprite) {\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    tilingSpriteData.batchableMesh = null;\n    tilingSpriteData.shader?.destroy();\n    this._tilingSpriteDataHash[tilingSprite.uid] = null;\n    tilingSprite.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  _getTilingSpriteData(renderable) {\n    return this._tilingSpriteDataHash[renderable.uid] || this._initTilingSpriteData(renderable);\n  }\n  _initTilingSpriteData(tilingSprite) {\n    const geometry = new MeshGeometry({\n      indices: sharedQuad.indices,\n      positions: sharedQuad.positions.slice(),\n      uvs: sharedQuad.uvs.slice()\n    });\n    this._tilingSpriteDataHash[tilingSprite.uid] = {\n      canBatch: true,\n      renderable: tilingSprite,\n      geometry\n    };\n    tilingSprite.on(\"destroyed\", this._destroyRenderableBound);\n    return this._tilingSpriteDataHash[tilingSprite.uid];\n  }\n  _updateBatchableMesh(tilingSprite) {\n    const renderableData = this._getTilingSpriteData(tilingSprite);\n    const { geometry } = renderableData;\n    const style = tilingSprite.texture.source.style;\n    if (style.addressMode !== \"repeat\") {\n      style.addressMode = \"repeat\";\n      style.update();\n    }\n    setUvs(tilingSprite, geometry.uvs);\n    setPositions(tilingSprite, geometry.positions);\n  }\n  destroy() {\n    for (const i in this._tilingSpriteDataHash) {\n      this.destroyRenderable(this._tilingSpriteDataHash[i].renderable);\n    }\n    this._tilingSpriteDataHash = null;\n    this._renderer = null;\n  }\n  _updateCanBatch(tilingSprite) {\n    const renderableData = this._getTilingSpriteData(tilingSprite);\n    const texture = tilingSprite.texture;\n    let _nonPowOf2wrapping = true;\n    if (this._renderer.type === RendererType.WEBGL) {\n      _nonPowOf2wrapping = this._renderer.context.supports.nonPowOf2wrapping;\n    }\n    renderableData.canBatch = texture.textureMatrix.isSimple && (_nonPowOf2wrapping || texture.source.isPowerOfTwo);\n    return renderableData.canBatch;\n  }\n}\n/** @ignore */\nTilingSpritePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"tilingSprite\"\n};\n\nexport { TilingSpritePipe };\n//# sourceMappingURL=TilingSpritePipe.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { applyMatrix } from './applyMatrix.mjs';\n\n\"use strict\";\nfunction setUvs(tilingSprite, uvs) {\n  const texture = tilingSprite.texture;\n  const width = texture.frame.width;\n  const height = texture.frame.height;\n  let anchorX = 0;\n  let anchorY = 0;\n  if (tilingSprite.applyAnchorToTexture) {\n    anchorX = tilingSprite.anchor.x;\n    anchorY = tilingSprite.anchor.y;\n  }\n  uvs[0] = uvs[6] = -anchorX;\n  uvs[2] = uvs[4] = 1 - anchorX;\n  uvs[1] = uvs[3] = -anchorY;\n  uvs[5] = uvs[7] = 1 - anchorY;\n  const textureMatrix = Matrix.shared;\n  textureMatrix.copyFrom(tilingSprite._tileTransform.matrix);\n  textureMatrix.tx /= tilingSprite.width;\n  textureMatrix.ty /= tilingSprite.height;\n  textureMatrix.invert();\n  textureMatrix.scale(tilingSprite.width / width, tilingSprite.height / height);\n  applyMatrix(uvs, 2, 0, textureMatrix);\n}\n\nexport { setUvs };\n//# sourceMappingURL=setUvs.mjs.map\n","\"use strict\";\nfunction applyMatrix(array, stride, offset, matrix) {\n  let index = 0;\n  const size = array.length / (stride || 2);\n  const a = matrix.a;\n  const b = matrix.b;\n  const c = matrix.c;\n  const d = matrix.d;\n  const tx = matrix.tx;\n  const ty = matrix.ty;\n  offset *= stride;\n  while (index < size) {\n    const x = array[offset];\n    const y = array[offset + 1];\n    array[offset] = a * x + c * y + tx;\n    array[offset + 1] = b * x + d * y + ty;\n    offset += stride;\n    index++;\n  }\n}\n\nexport { applyMatrix };\n//# sourceMappingURL=applyMatrix.mjs.map\n","\"use strict\";\nfunction setPositions(tilingSprite, positions) {\n  const anchorX = tilingSprite.anchor.x;\n  const anchorY = tilingSprite.anchor.y;\n  positions[0] = -anchorX * tilingSprite.width;\n  positions[1] = -anchorY * tilingSprite.height;\n  positions[2] = (1 - anchorX) * tilingSprite.width;\n  positions[3] = -anchorY * tilingSprite.height;\n  positions[4] = (1 - anchorX) * tilingSprite.width;\n  positions[5] = (1 - anchorY) * tilingSprite.height;\n  positions[6] = -anchorX * tilingSprite.width;\n  positions[7] = (1 - anchorY) * tilingSprite.height;\n}\n\nexport { setPositions };\n//# sourceMappingURL=setPositions.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { TilingSpritePipe } from './TilingSpritePipe.mjs';\n\n\"use strict\";\nextensions.add(TilingSpritePipe);\n//# sourceMappingURL=init.mjs.map\n","\"use strict\";\nclass BatchableMesh {\n  constructor() {\n    this.batcherName = \"default\";\n    this.packAsQuad = false;\n    this.indexOffset = 0;\n    this.attributeOffset = 0;\n    this.roundPixels = 0;\n    this._batcher = null;\n    this._batch = null;\n    this._textureMatrixUpdateId = -1;\n    this._uvUpdateId = -1;\n  }\n  get blendMode() {\n    return this.renderable.groupBlendMode;\n  }\n  get topology() {\n    return this._topology || this.geometry.topology;\n  }\n  set topology(value) {\n    this._topology = value;\n  }\n  reset() {\n    this.renderable = null;\n    this.texture = null;\n    this._batcher = null;\n    this._batch = null;\n    this.geometry = null;\n    this._uvUpdateId = -1;\n    this._textureMatrixUpdateId = -1;\n  }\n  /**\n   * Sets the texture for the batchable mesh.\n   * As it does so, it resets the texture matrix update ID.\n   * this is to ensure that the texture matrix is recalculated when the uvs are referenced\n   * @param value - The texture to set.\n   */\n  setTexture(value) {\n    if (this.texture === value)\n      return;\n    this.texture = value;\n    this._textureMatrixUpdateId = -1;\n  }\n  get uvs() {\n    const geometry = this.geometry;\n    const uvBuffer = geometry.getBuffer(\"aUV\");\n    const uvs = uvBuffer.data;\n    let transformedUvs = uvs;\n    const textureMatrix = this.texture.textureMatrix;\n    if (!textureMatrix.isSimple) {\n      transformedUvs = this._transformedUvs;\n      if (this._textureMatrixUpdateId !== textureMatrix._updateID || this._uvUpdateId !== uvBuffer._updateID) {\n        if (!transformedUvs || transformedUvs.length < uvs.length) {\n          transformedUvs = this._transformedUvs = new Float32Array(uvs.length);\n        }\n        this._textureMatrixUpdateId = textureMatrix._updateID;\n        this._uvUpdateId = uvBuffer._updateID;\n        textureMatrix.multiplyUvs(uvs, transformedUvs);\n      }\n    }\n    return transformedUvs;\n  }\n  get positions() {\n    return this.geometry.positions;\n  }\n  get indices() {\n    return this.geometry.indices;\n  }\n  get color() {\n    return this.renderable.groupColorAlpha;\n  }\n  get groupTransform() {\n    return this.renderable.groupTransform;\n  }\n  get attributeSize() {\n    return this.geometry.positions.length / 2;\n  }\n  get indexSize() {\n    return this.geometry.indices.length;\n  }\n}\n\nexport { BatchableMesh };\n//# sourceMappingURL=BatchableMesh.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { State } from '../../../rendering/renderers/shared/state/State.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { color32BitToUniform } from '../gpu/colorToUniform.mjs';\nimport { BatchableGraphics } from './BatchableGraphics.mjs';\n\n\"use strict\";\nclass GraphicsPipe {\n  constructor(renderer, adaptor) {\n    this.state = State.for2d();\n    // batchable graphics list, used to render batches\n    this._graphicsBatchesHash = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this._adaptor.init();\n    this.renderer.renderableGC.addManagedHash(this, \"_graphicsBatchesHash\");\n  }\n  validateRenderable(graphics) {\n    const context = graphics.context;\n    const wasBatched = !!this._graphicsBatchesHash[graphics.uid];\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(context);\n    if (gpuContext.isBatchable || wasBatched !== gpuContext.isBatchable) {\n      return true;\n    }\n    return false;\n  }\n  addRenderable(graphics, instructionSet) {\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n    if (graphics.didViewUpdate) {\n      this._rebuild(graphics);\n    }\n    if (gpuContext.isBatchable) {\n      this._addToBatcher(graphics, instructionSet);\n    } else {\n      this.renderer.renderPipes.batch.break(instructionSet);\n      instructionSet.add(graphics);\n    }\n  }\n  updateRenderable(graphics) {\n    const batches = this._graphicsBatchesHash[graphics.uid];\n    if (batches) {\n      for (let i = 0; i < batches.length; i++) {\n        const batch = batches[i];\n        batch._batcher.updateElement(batch);\n      }\n    }\n  }\n  destroyRenderable(graphics) {\n    if (this._graphicsBatchesHash[graphics.uid]) {\n      this._removeBatchForRenderable(graphics.uid);\n    }\n    graphics.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  execute(graphics) {\n    if (!graphics.isRenderable)\n      return;\n    const renderer = this.renderer;\n    const context = graphics.context;\n    const contextSystem = renderer.graphicsContext;\n    if (!contextSystem.getGpuContext(context).batches.length) {\n      return;\n    }\n    const shader = context.customShader || this._adaptor.shader;\n    this.state.blendMode = graphics.groupBlendMode;\n    const localUniforms = shader.resources.localUniforms.uniforms;\n    localUniforms.uTransformMatrix = graphics.groupTransform;\n    localUniforms.uRound = renderer._roundPixels | graphics._roundPixels;\n    color32BitToUniform(\n      graphics.groupColorAlpha,\n      localUniforms.uColor,\n      0\n    );\n    this._adaptor.execute(this, graphics);\n  }\n  _rebuild(graphics) {\n    const wasBatched = !!this._graphicsBatchesHash[graphics.uid];\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n    if (wasBatched) {\n      this._removeBatchForRenderable(graphics.uid);\n    }\n    if (gpuContext.isBatchable) {\n      this._initBatchesForRenderable(graphics);\n    }\n    graphics.batched = gpuContext.isBatchable;\n  }\n  _addToBatcher(graphics, instructionSet) {\n    const batchPipe = this.renderer.renderPipes.batch;\n    const batches = this._getBatchesForRenderable(graphics);\n    for (let i = 0; i < batches.length; i++) {\n      const batch = batches[i];\n      batchPipe.addToBatch(batch, instructionSet);\n    }\n  }\n  _getBatchesForRenderable(graphics) {\n    return this._graphicsBatchesHash[graphics.uid] || this._initBatchesForRenderable(graphics);\n  }\n  _initBatchesForRenderable(graphics) {\n    const context = graphics.context;\n    const gpuContext = this.renderer.graphicsContext.getGpuContext(context);\n    const roundPixels = this.renderer._roundPixels | graphics._roundPixels;\n    const batches = gpuContext.batches.map((batch) => {\n      const batchClone = BigPool.get(BatchableGraphics);\n      batch.copyTo(batchClone);\n      batchClone.renderable = graphics;\n      batchClone.roundPixels = roundPixels;\n      return batchClone;\n    });\n    if (this._graphicsBatchesHash[graphics.uid] === void 0) {\n      graphics.on(\"destroyed\", this._destroyRenderableBound);\n    }\n    this._graphicsBatchesHash[graphics.uid] = batches;\n    return batches;\n  }\n  _removeBatchForRenderable(graphicsUid) {\n    this._graphicsBatchesHash[graphicsUid].forEach((batch) => {\n      BigPool.return(batch);\n    });\n    this._graphicsBatchesHash[graphicsUid] = null;\n  }\n  destroy() {\n    this.renderer = null;\n    this._adaptor.destroy();\n    this._adaptor = null;\n    this.state = null;\n    for (const i in this._graphicsBatchesHash) {\n      this._removeBatchForRenderable(i);\n    }\n    this._graphicsBatchesHash = null;\n  }\n}\n/** @ignore */\nGraphicsPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"graphics\"\n};\n\nexport { GraphicsPipe };\n//# sourceMappingURL=GraphicsPipe.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { GraphicsContextSystem } from './shared/GraphicsContextSystem.mjs';\nimport { GraphicsPipe } from './shared/GraphicsPipe.mjs';\n\n\"use strict\";\nextensions.add(GraphicsPipe);\nextensions.add(GraphicsContextSystem);\n//# sourceMappingURL=init.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { BatchableSprite } from '../sprite/BatchableSprite.mjs';\nimport { updateTextBounds } from '../text/utils/updateTextBounds.mjs';\n\n\"use strict\";\nclass HTMLTextPipe {\n  constructor(renderer) {\n    this._gpuText = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n    this._renderer.runners.resolutionChange.add(this);\n    this._renderer.renderableGC.addManagedHash(this, \"_gpuText\");\n  }\n  resolutionChange() {\n    for (const i in this._gpuText) {\n      const gpuText = this._gpuText[i];\n      if (!gpuText)\n        continue;\n      const text = gpuText.batchableSprite.renderable;\n      if (text._autoResolution) {\n        text._resolution = this._renderer.resolution;\n        text.onViewUpdate();\n      }\n    }\n  }\n  validateRenderable(htmlText) {\n    const gpuText = this._getGpuText(htmlText);\n    const newKey = htmlText._getKey();\n    if (gpuText.textureNeedsUploading) {\n      gpuText.textureNeedsUploading = false;\n      return true;\n    }\n    if (gpuText.currentKey !== newKey) {\n      return true;\n    }\n    return false;\n  }\n  addRenderable(htmlText, instructionSet) {\n    const gpuText = this._getGpuText(htmlText);\n    const batchableSprite = gpuText.batchableSprite;\n    if (htmlText._didTextUpdate) {\n      this._updateText(htmlText);\n    }\n    this._renderer.renderPipes.batch.addToBatch(batchableSprite, instructionSet);\n  }\n  updateRenderable(htmlText) {\n    const gpuText = this._getGpuText(htmlText);\n    const batchableSprite = gpuText.batchableSprite;\n    if (htmlText._didTextUpdate) {\n      this._updateText(htmlText);\n    }\n    batchableSprite._batcher.updateElement(batchableSprite);\n  }\n  destroyRenderable(htmlText) {\n    htmlText.off(\"destroyed\", this._destroyRenderableBound);\n    this._destroyRenderableById(htmlText.uid);\n  }\n  _destroyRenderableById(htmlTextUid) {\n    const gpuText = this._gpuText[htmlTextUid];\n    this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n    BigPool.return(gpuText.batchableSprite);\n    this._gpuText[htmlTextUid] = null;\n  }\n  _updateText(htmlText) {\n    const newKey = htmlText._getKey();\n    const gpuText = this._getGpuText(htmlText);\n    const batchableSprite = gpuText.batchableSprite;\n    if (gpuText.currentKey !== newKey) {\n      this._updateGpuText(htmlText).catch((e) => {\n        console.error(e);\n      });\n    }\n    htmlText._didTextUpdate = false;\n    updateTextBounds(batchableSprite, htmlText);\n  }\n  async _updateGpuText(htmlText) {\n    htmlText._didTextUpdate = false;\n    const gpuText = this._getGpuText(htmlText);\n    if (gpuText.generatingTexture)\n      return;\n    const newKey = htmlText._getKey();\n    this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n    gpuText.generatingTexture = true;\n    gpuText.currentKey = newKey;\n    const resolution = htmlText.resolution ?? this._renderer.resolution;\n    const texture = await this._renderer.htmlText.getManagedTexture(\n      htmlText.text,\n      resolution,\n      htmlText._style,\n      htmlText._getKey()\n    );\n    const batchableSprite = gpuText.batchableSprite;\n    batchableSprite.texture = gpuText.texture = texture;\n    gpuText.generatingTexture = false;\n    gpuText.textureNeedsUploading = true;\n    htmlText.onViewUpdate();\n    updateTextBounds(batchableSprite, htmlText);\n  }\n  _getGpuText(htmlText) {\n    return this._gpuText[htmlText.uid] || this.initGpuText(htmlText);\n  }\n  initGpuText(htmlText) {\n    const gpuTextData = {\n      texture: Texture.EMPTY,\n      currentKey: \"--\",\n      batchableSprite: BigPool.get(BatchableSprite),\n      textureNeedsUploading: false,\n      generatingTexture: false\n    };\n    const batchableSprite = gpuTextData.batchableSprite;\n    batchableSprite.renderable = htmlText;\n    batchableSprite.transform = htmlText.groupTransform;\n    batchableSprite.texture = Texture.EMPTY;\n    batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n    batchableSprite.roundPixels = this._renderer._roundPixels | htmlText._roundPixels;\n    htmlText._resolution = htmlText._autoResolution ? this._renderer.resolution : htmlText.resolution;\n    this._gpuText[htmlText.uid] = gpuTextData;\n    htmlText.on(\"destroyed\", this._destroyRenderableBound);\n    return gpuTextData;\n  }\n  destroy() {\n    for (const i in this._gpuText) {\n      this._destroyRenderableById(i);\n    }\n    this._gpuText = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nHTMLTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"htmlText\"\n};\n\nexport { HTMLTextPipe };\n//# sourceMappingURL=HTMLTextPipe.mjs.map\n","\"use strict\";\nconst nssvg = \"http://www.w3.org/2000/svg\";\nconst nsxhtml = \"http://www.w3.org/1999/xhtml\";\nclass HTMLTextRenderData {\n  constructor() {\n    this.svgRoot = document.createElementNS(nssvg, \"svg\");\n    this.foreignObject = document.createElementNS(nssvg, \"foreignObject\");\n    this.domElement = document.createElementNS(nsxhtml, \"div\");\n    this.styleElement = document.createElementNS(nsxhtml, \"style\");\n    this.image = new Image();\n    const { foreignObject, svgRoot, styleElement, domElement } = this;\n    foreignObject.setAttribute(\"width\", \"10000\");\n    foreignObject.setAttribute(\"height\", \"10000\");\n    foreignObject.style.overflow = \"hidden\";\n    svgRoot.appendChild(foreignObject);\n    foreignObject.appendChild(styleElement);\n    foreignObject.appendChild(domElement);\n  }\n}\n\nexport { HTMLTextRenderData, nssvg, nsxhtml };\n//# sourceMappingURL=HTMLTextRenderData.mjs.map\n","import { Color } from '../../../color/Color.mjs';\n\n\"use strict\";\nfunction textStyleToCSS(style) {\n  const stroke = style._stroke;\n  const fill = style._fill;\n  const cssStyleString = [\n    `color: ${Color.shared.setValue(fill.color).toHex()}`,\n    `font-size: ${style.fontSize}px`,\n    `font-family: ${style.fontFamily}`,\n    `font-weight: ${style.fontWeight}`,\n    `font-style: ${style.fontStyle}`,\n    `font-variant: ${style.fontVariant}`,\n    `letter-spacing: ${style.letterSpacing}px`,\n    `text-align: ${style.align}`,\n    `padding: ${style.padding}px`,\n    `white-space: ${style.whiteSpace === \"pre\" && style.wordWrap ? \"pre-wrap\" : style.whiteSpace}`,\n    ...style.lineHeight ? [`line-height: ${style.lineHeight}px`] : [],\n    ...style.wordWrap ? [\n      `word-wrap: ${style.breakWords ? \"break-all\" : \"break-word\"}`,\n      `max-width: ${style.wordWrapWidth}px`\n    ] : [],\n    ...stroke ? [strokeToCSS(stroke)] : [],\n    ...style.dropShadow ? [dropShadowToCSS(style.dropShadow)] : [],\n    ...style.cssOverrides\n  ].join(\";\");\n  const cssStyles = [`div { ${cssStyleString} }`];\n  tagStyleToCSS(style.tagStyles, cssStyles);\n  return cssStyles.join(\" \");\n}\nfunction dropShadowToCSS(dropShadowStyle) {\n  const color = Color.shared.setValue(dropShadowStyle.color).setAlpha(dropShadowStyle.alpha).toHexa();\n  const x = Math.round(Math.cos(dropShadowStyle.angle) * dropShadowStyle.distance);\n  const y = Math.round(Math.sin(dropShadowStyle.angle) * dropShadowStyle.distance);\n  const position = `${x}px ${y}px`;\n  if (dropShadowStyle.blur > 0) {\n    return `text-shadow: ${position} ${dropShadowStyle.blur}px ${color}`;\n  }\n  return `text-shadow: ${position} ${color}`;\n}\nfunction strokeToCSS(stroke) {\n  return [\n    `-webkit-text-stroke-width: ${stroke.width}px`,\n    `-webkit-text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n    `text-stroke-width: ${stroke.width}px`,\n    `text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n    \"paint-order: stroke\"\n  ].join(\";\");\n}\nconst templates = {\n  fontSize: `font-size: {{VALUE}}px`,\n  fontFamily: `font-family: {{VALUE}}`,\n  fontWeight: `font-weight: {{VALUE}}`,\n  fontStyle: `font-style: {{VALUE}}`,\n  fontVariant: `font-variant: {{VALUE}}`,\n  letterSpacing: `letter-spacing: {{VALUE}}px`,\n  align: `text-align: {{VALUE}}`,\n  padding: `padding: {{VALUE}}px`,\n  whiteSpace: `white-space: {{VALUE}}`,\n  lineHeight: `line-height: {{VALUE}}px`,\n  wordWrapWidth: `max-width: {{VALUE}}px`\n};\nconst transform = {\n  fill: (value) => `color: ${Color.shared.setValue(value).toHex()}`,\n  breakWords: (value) => `word-wrap: ${value ? \"break-all\" : \"break-word\"}`,\n  stroke: strokeToCSS,\n  dropShadow: dropShadowToCSS\n};\nfunction tagStyleToCSS(tagStyles, out) {\n  for (const i in tagStyles) {\n    const tagStyle = tagStyles[i];\n    const cssTagStyle = [];\n    for (const j in tagStyle) {\n      if (transform[j]) {\n        cssTagStyle.push(transform[j](tagStyle[j]));\n      } else if (templates[j]) {\n        cssTagStyle.push(templates[j].replace(\"{{VALUE}}\", tagStyle[j]));\n      }\n    }\n    out.push(`${i} { ${cssTagStyle.join(\";\")} }`);\n  }\n}\n\nexport { textStyleToCSS };\n//# sourceMappingURL=textStyleToCSS.mjs.map\n","import { warn } from '../../utils/logging/warn.mjs';\nimport { TextStyle } from '../text/TextStyle.mjs';\nimport { generateTextStyleKey } from '../text/utils/generateTextStyleKey.mjs';\nimport { textStyleToCSS } from './utils/textStyleToCSS.mjs';\n\n\"use strict\";\nclass HTMLTextStyle extends TextStyle {\n  constructor(options = {}) {\n    super(options);\n    this._cssOverrides = [];\n    this.cssOverrides ?? (this.cssOverrides = options.cssOverrides);\n    this.tagStyles = options.tagStyles ?? {};\n  }\n  /** List of style overrides that will be applied to the HTML text. */\n  set cssOverrides(value) {\n    this._cssOverrides = value instanceof Array ? value : [value];\n    this.update();\n  }\n  get cssOverrides() {\n    return this._cssOverrides;\n  }\n  _generateKey() {\n    this._styleKey = generateTextStyleKey(this) + this._cssOverrides.join(\"-\");\n    return this._styleKey;\n  }\n  update() {\n    this._cssStyle = null;\n    super.update();\n  }\n  /**\n   * Creates a new HTMLTextStyle object with the same values as this one.\n   * @returns New cloned HTMLTextStyle object\n   */\n  clone() {\n    return new HTMLTextStyle({\n      align: this.align,\n      breakWords: this.breakWords,\n      dropShadow: this.dropShadow ? { ...this.dropShadow } : null,\n      fill: this._fill,\n      fontFamily: this.fontFamily,\n      fontSize: this.fontSize,\n      fontStyle: this.fontStyle,\n      fontVariant: this.fontVariant,\n      fontWeight: this.fontWeight,\n      letterSpacing: this.letterSpacing,\n      lineHeight: this.lineHeight,\n      padding: this.padding,\n      stroke: this._stroke,\n      whiteSpace: this.whiteSpace,\n      wordWrap: this.wordWrap,\n      wordWrapWidth: this.wordWrapWidth,\n      cssOverrides: this.cssOverrides\n    });\n  }\n  get cssStyle() {\n    if (!this._cssStyle) {\n      this._cssStyle = textStyleToCSS(this);\n    }\n    return this._cssStyle;\n  }\n  /**\n   * Add a style override, this can be any CSS property\n   * it will override any built-in style. This is the\n   * property and the value as a string (e.g., `color: red`).\n   * This will override any other internal style.\n   * @param {string} value - CSS style(s) to add.\n   * @example\n   * style.addOverride('background-color: red');\n   */\n  addOverride(...value) {\n    const toAdd = value.filter((v) => !this.cssOverrides.includes(v));\n    if (toAdd.length > 0) {\n      this.cssOverrides.push(...toAdd);\n      this.update();\n    }\n  }\n  /**\n   * Remove any overrides that match the value.\n   * @param {string} value - CSS style to remove.\n   * @example\n   * style.removeOverride('background-color: red');\n   */\n  removeOverride(...value) {\n    const toRemove = value.filter((v) => this.cssOverrides.includes(v));\n    if (toRemove.length > 0) {\n      this.cssOverrides = this.cssOverrides.filter((v) => !toRemove.includes(v));\n      this.update();\n    }\n  }\n  set fill(value) {\n    if (typeof value !== \"string\" && typeof value !== \"number\") {\n      warn(\"[HTMLTextStyle] only color fill is not supported by HTMLText\");\n    }\n    super.fill = value;\n  }\n  set stroke(value) {\n    if (value && typeof value !== \"string\" && typeof value !== \"number\") {\n      warn(\"[HTMLTextStyle] only color stroke is not supported by HTMLText\");\n    }\n    super.stroke = value;\n  }\n}\n\nexport { HTMLTextStyle };\n//# sourceMappingURL=HTMLTextStyle.mjs.map\n","import { loadFontAsBase64 } from './loadFontAsBase64.mjs';\n\n\"use strict\";\nasync function loadFontCSS(style, url) {\n  const dataSrc = await loadFontAsBase64(url);\n  return `@font-face {\n        font-family: \"${style.fontFamily}\";\n        src: url('${dataSrc}');\n        font-weight: ${style.fontWeight};\n        font-style: ${style.fontStyle};\n    }`;\n}\n\nexport { loadFontCSS };\n//# sourceMappingURL=loadFontCSS.mjs.map\n","import { DOMAdapter } from '../../../environment/adapter.mjs';\n\n\"use strict\";\nasync function loadFontAsBase64(url) {\n  const response = await DOMAdapter.get().fetch(url);\n  const blob = await response.blob();\n  const reader = new FileReader();\n  const dataSrc = await new Promise((resolve, reject) => {\n    reader.onloadend = () => resolve(reader.result);\n    reader.onerror = reject;\n    reader.readAsDataURL(blob);\n  });\n  return dataSrc;\n}\n\nexport { loadFontAsBase64 };\n//# sourceMappingURL=loadFontAsBase64.mjs.map\n","import { Cache } from '../../../assets/cache/Cache.mjs';\nimport { loadFontCSS } from './loadFontCSS.mjs';\n\n\"use strict\";\nconst FontStylePromiseCache = /* @__PURE__ */ new Map();\nasync function getFontCss(fontFamilies, style, defaultOptions) {\n  const fontPromises = fontFamilies.filter((fontFamily) => Cache.has(`${fontFamily}-and-url`)).map((fontFamily, i) => {\n    if (!FontStylePromiseCache.has(fontFamily)) {\n      const { url } = Cache.get(`${fontFamily}-and-url`);\n      if (i === 0) {\n        FontStylePromiseCache.set(fontFamily, loadFontCSS({\n          fontWeight: style.fontWeight,\n          fontStyle: style.fontStyle,\n          fontFamily\n        }, url));\n      } else {\n        FontStylePromiseCache.set(fontFamily, loadFontCSS({\n          fontWeight: defaultOptions.fontWeight,\n          fontStyle: defaultOptions.fontStyle,\n          fontFamily\n        }, url));\n      }\n    }\n    return FontStylePromiseCache.get(fontFamily);\n  });\n  return (await Promise.all(fontPromises)).join(\"\\n\");\n}\n\nexport { FontStylePromiseCache, getFontCss };\n//# sourceMappingURL=getFontCss.mjs.map\n","import { HTMLTextRenderData } from '../HTMLTextRenderData.mjs';\n\n\"use strict\";\nlet tempHTMLTextRenderData;\nfunction measureHtmlText(text, style, fontStyleCSS, htmlTextRenderData) {\n  htmlTextRenderData || (htmlTextRenderData = tempHTMLTextRenderData || (tempHTMLTextRenderData = new HTMLTextRenderData()));\n  const { domElement, styleElement, svgRoot } = htmlTextRenderData;\n  domElement.innerHTML = `<style>${style.cssStyle};</style><div style='padding:0'>${text}</div>`;\n  domElement.setAttribute(\"style\", \"transform-origin: top left; display: inline-block\");\n  if (fontStyleCSS) {\n    styleElement.textContent = fontStyleCSS;\n  }\n  document.body.appendChild(svgRoot);\n  const contentBounds = domElement.getBoundingClientRect();\n  svgRoot.remove();\n  const doublePadding = style.padding * 2;\n  return {\n    width: contentBounds.width - doublePadding,\n    height: contentBounds.height - doublePadding\n  };\n}\n\nexport { measureHtmlText };\n//# sourceMappingURL=measureHtmlText.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { CanvasPool } from '../../rendering/renderers/shared/texture/CanvasPool.mjs';\nimport { TexturePool } from '../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { RendererType } from '../../rendering/renderers/types.mjs';\nimport { isSafari } from '../../utils/browser/isSafari.mjs';\nimport { warn } from '../../utils/logging/warn.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { getPo2TextureFromSource } from '../text/utils/getPo2TextureFromSource.mjs';\nimport { HTMLTextRenderData } from './HTMLTextRenderData.mjs';\nimport { HTMLTextStyle } from './HTMLTextStyle.mjs';\nimport { extractFontFamilies } from './utils/extractFontFamilies.mjs';\nimport { getFontCss } from './utils/getFontCss.mjs';\nimport { getSVGUrl } from './utils/getSVGUrl.mjs';\nimport { getTemporaryCanvasFromImage } from './utils/getTemporaryCanvasFromImage.mjs';\nimport { loadSVGImage } from './utils/loadSVGImage.mjs';\nimport { measureHtmlText } from './utils/measureHtmlText.mjs';\n\n\"use strict\";\nclass HTMLTextSystem {\n  constructor(renderer) {\n    this._activeTextures = {};\n    this._renderer = renderer;\n    this._createCanvas = renderer.type === RendererType.WEBGPU;\n  }\n  getTexture(options) {\n    return this._buildTexturePromise(\n      options.text,\n      options.resolution,\n      options.style\n    );\n  }\n  getManagedTexture(text, resolution, style, textKey) {\n    if (this._activeTextures[textKey]) {\n      this._increaseReferenceCount(textKey);\n      return this._activeTextures[textKey].promise;\n    }\n    const promise = this._buildTexturePromise(text, resolution, style).then((texture) => {\n      this._activeTextures[textKey].texture = texture;\n      return texture;\n    });\n    this._activeTextures[textKey] = {\n      texture: null,\n      promise,\n      usageCount: 1\n    };\n    return promise;\n  }\n  async _buildTexturePromise(text, resolution, style) {\n    const htmlTextData = BigPool.get(HTMLTextRenderData);\n    const fontFamilies = extractFontFamilies(text, style);\n    const fontCSS = await getFontCss(\n      fontFamilies,\n      style,\n      HTMLTextStyle.defaultTextStyle\n    );\n    const measured = measureHtmlText(text, style, fontCSS, htmlTextData);\n    const width = Math.ceil(Math.ceil(Math.max(1, measured.width) + style.padding * 2) * resolution);\n    const height = Math.ceil(Math.ceil(Math.max(1, measured.height) + style.padding * 2) * resolution);\n    const image = htmlTextData.image;\n    const uvSafeOffset = 2;\n    image.width = (width | 0) + uvSafeOffset;\n    image.height = (height | 0) + uvSafeOffset;\n    const svgURL = getSVGUrl(text, style, resolution, fontCSS, htmlTextData);\n    await loadSVGImage(image, svgURL, isSafari() && fontFamilies.length > 0);\n    const resource = image;\n    let canvasAndContext;\n    if (this._createCanvas) {\n      canvasAndContext = getTemporaryCanvasFromImage(image, resolution);\n    }\n    const texture = getPo2TextureFromSource(\n      canvasAndContext ? canvasAndContext.canvas : resource,\n      image.width - uvSafeOffset,\n      image.height - uvSafeOffset,\n      resolution\n    );\n    if (this._createCanvas) {\n      this._renderer.texture.initSource(texture.source);\n      CanvasPool.returnCanvasAndContext(canvasAndContext);\n    }\n    BigPool.return(htmlTextData);\n    return texture;\n  }\n  _increaseReferenceCount(textKey) {\n    this._activeTextures[textKey].usageCount++;\n  }\n  decreaseReferenceCount(textKey) {\n    const activeTexture = this._activeTextures[textKey];\n    if (!activeTexture)\n      return;\n    activeTexture.usageCount--;\n    if (activeTexture.usageCount === 0) {\n      if (activeTexture.texture) {\n        this._cleanUp(activeTexture);\n      } else {\n        activeTexture.promise.then((texture) => {\n          activeTexture.texture = texture;\n          this._cleanUp(activeTexture);\n        }).catch(() => {\n          warn(\"HTMLTextSystem: Failed to clean texture\");\n        });\n      }\n      this._activeTextures[textKey] = null;\n    }\n  }\n  _cleanUp(activeTexture) {\n    TexturePool.returnTexture(activeTexture.texture);\n    activeTexture.texture.source.resource = null;\n    activeTexture.texture.source.uploadMethodId = \"unknown\";\n  }\n  getReferenceCount(textKey) {\n    return this._activeTextures[textKey].usageCount;\n  }\n  destroy() {\n    this._activeTextures = null;\n  }\n}\n/** @ignore */\nHTMLTextSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"htmlText\"\n};\nHTMLTextSystem.defaultFontOptions = {\n  fontFamily: \"Arial\",\n  fontStyle: \"normal\",\n  fontWeight: \"normal\"\n};\n\nexport { HTMLTextSystem };\n//# sourceMappingURL=HTMLTextSystem.mjs.map\n","\"use strict\";\nfunction extractFontFamilies(text, style) {\n  const fontFamily = style.fontFamily;\n  const fontFamilies = [];\n  const dedupe = {};\n  const regex = /font-family:([^;\"\\s]+)/g;\n  const matches = text.match(regex);\n  function addFontFamily(fontFamily2) {\n    if (!dedupe[fontFamily2]) {\n      fontFamilies.push(fontFamily2);\n      dedupe[fontFamily2] = true;\n    }\n  }\n  if (Array.isArray(fontFamily)) {\n    for (let i = 0; i < fontFamily.length; i++) {\n      addFontFamily(fontFamily[i]);\n    }\n  } else {\n    addFontFamily(fontFamily);\n  }\n  if (matches) {\n    matches.forEach((match) => {\n      const fontFamily2 = match.split(\":\")[1].trim();\n      addFontFamily(fontFamily2);\n    });\n  }\n  for (const i in style.tagStyles) {\n    const fontFamily2 = style.tagStyles[i].fontFamily;\n    addFontFamily(fontFamily2);\n  }\n  return fontFamilies;\n}\n\nexport { extractFontFamilies };\n//# sourceMappingURL=extractFontFamilies.mjs.map\n","\"use strict\";\nfunction getSVGUrl(text, style, resolution, fontCSS, htmlTextData) {\n  const { domElement, styleElement, svgRoot } = htmlTextData;\n  domElement.innerHTML = `<style>${style.cssStyle}</style><div style='padding:0;'>${text}</div>`;\n  domElement.setAttribute(\"style\", `transform: scale(${resolution});transform-origin: top left; display: inline-block`);\n  styleElement.textContent = fontCSS;\n  const { width, height } = htmlTextData.image;\n  svgRoot.setAttribute(\"width\", width.toString());\n  svgRoot.setAttribute(\"height\", height.toString());\n  return new XMLSerializer().serializeToString(svgRoot);\n}\n\nexport { getSVGUrl };\n//# sourceMappingURL=getSVGUrl.mjs.map\n","\"use strict\";\nfunction loadSVGImage(image, url, delay) {\n  return new Promise(async (resolve) => {\n    if (delay) {\n      await new Promise((resolve2) => setTimeout(resolve2, 100));\n    }\n    image.onload = () => {\n      resolve();\n    };\n    image.src = `data:image/svg+xml;charset=utf8,${encodeURIComponent(url)}`;\n    image.crossOrigin = \"anonymous\";\n  });\n}\n\nexport { loadSVGImage };\n//# sourceMappingURL=loadSVGImage.mjs.map\n","import { DOMAdapter } from '../../environment/adapter.mjs';\n\n\"use strict\";\nfunction isSafari() {\n  const { userAgent } = DOMAdapter.get().getNavigator();\n  return /^((?!chrome|android).)*safari/i.test(userAgent);\n}\n\nexport { isSafari };\n//# sourceMappingURL=isSafari.mjs.map\n","import { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool.mjs';\n\n\"use strict\";\nfunction getTemporaryCanvasFromImage(image, resolution) {\n  const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(\n    image.width,\n    image.height,\n    resolution\n  );\n  const { context } = canvasAndContext;\n  context.clearRect(0, 0, image.width, image.height);\n  context.drawImage(image, 0, 0);\n  return canvasAndContext;\n}\n\nexport { getTemporaryCanvasFromImage };\n//# sourceMappingURL=getTemporaryCanvasFromImage.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { HTMLTextPipe } from './HTMLTextPipe.mjs';\nimport { HTMLTextSystem } from './HTMLTextSystem.mjs';\n\n\"use strict\";\nextensions.add(HTMLTextSystem);\nextensions.add(HTMLTextPipe);\n//# sourceMappingURL=init.mjs.map\n","\"use strict\";\nclass GlParticleContainerAdaptor {\n  execute(particleContainerPipe, container) {\n    const state = particleContainerPipe.state;\n    const renderer = particleContainerPipe.renderer;\n    const shader = container.shader || particleContainerPipe.defaultShader;\n    shader.resources.uTexture = container.texture._source;\n    shader.resources.uniforms = particleContainerPipe.localUniforms;\n    const gl = renderer.gl;\n    const buffer = particleContainerPipe.getBuffers(container);\n    renderer.shader.bind(shader);\n    renderer.state.set(state);\n    renderer.geometry.bind(buffer.geometry, shader.glProgram);\n    const byteSize = buffer.geometry.indexBuffer.data.BYTES_PER_ELEMENT;\n    const glType = byteSize === 2 ? gl.UNSIGNED_SHORT : gl.UNSIGNED_INT;\n    gl.drawElements(gl.TRIANGLES, container.particleChildren.length * 6, glType, 0);\n  }\n}\n\nexport { GlParticleContainerAdaptor };\n//# sourceMappingURL=GlParticleContainerAdaptor.mjs.map\n","\"use strict\";\nfunction createIndicesForQuads(size, outBuffer = null) {\n  const totalIndices = size * 6;\n  if (totalIndices > 65535) {\n    outBuffer || (outBuffer = new Uint32Array(totalIndices));\n  } else {\n    outBuffer || (outBuffer = new Uint16Array(totalIndices));\n  }\n  if (outBuffer.length !== totalIndices) {\n    throw new Error(`Out buffer length is incorrect, got ${outBuffer.length} and expected ${totalIndices}`);\n  }\n  for (let i = 0, j = 0; i < totalIndices; i += 6, j += 4) {\n    outBuffer[i + 0] = j + 0;\n    outBuffer[i + 1] = j + 1;\n    outBuffer[i + 2] = j + 2;\n    outBuffer[i + 3] = j + 0;\n    outBuffer[i + 4] = j + 2;\n    outBuffer[i + 5] = j + 3;\n  }\n  return outBuffer;\n}\n\nexport { createIndicesForQuads };\n//# sourceMappingURL=createIndicesForQuads.mjs.map\n","import { getAttributeInfoFromFormat } from '../../../../rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat.mjs';\n\n\"use strict\";\nfunction generateParticleUpdateFunction(properties) {\n  return {\n    dynamicUpdate: generateUpdateFunction(properties, true),\n    staticUpdate: generateUpdateFunction(properties, false)\n  };\n}\nfunction generateUpdateFunction(properties, dynamic) {\n  const funcFragments = [];\n  funcFragments.push(`\n      \n        var index = 0;\n\n        for (let i = 0; i < ps.length; ++i)\n        {\n            const p = ps[i];\n\n            `);\n  let offset = 0;\n  for (const i in properties) {\n    const property = properties[i];\n    if (dynamic !== property.dynamic)\n      continue;\n    funcFragments.push(`offset = index + ${offset}`);\n    funcFragments.push(property.code);\n    const attributeInfo = getAttributeInfoFromFormat(property.format);\n    offset += attributeInfo.stride / 4;\n  }\n  funcFragments.push(`\n            index += stride * 4;\n        }\n    `);\n  funcFragments.unshift(`\n        var stride = ${offset};\n    `);\n  const functionSource = funcFragments.join(\"\\n\");\n  return new Function(\"ps\", \"f32v\", \"u32v\", functionSource);\n}\n\nexport { generateParticleUpdateFunction };\n//# sourceMappingURL=generateParticleUpdateFunction.mjs.map\n","import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer.mjs';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const.mjs';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry.mjs';\nimport { getAttributeInfoFromFormat } from '../../../rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat.mjs';\nimport { ViewableBuffer } from '../../../utils/data/ViewableBuffer.mjs';\nimport { createIndicesForQuads } from './utils/createIndicesForQuads.mjs';\nimport { generateParticleUpdateFunction } from './utils/generateParticleUpdateFunction.mjs';\n\n\"use strict\";\nclass ParticleBuffer {\n  constructor(options) {\n    this._size = 0;\n    this._generateParticleUpdateCache = {};\n    const size = this._size = options.size ?? 1e3;\n    const properties = options.properties;\n    let staticVertexSize = 0;\n    let dynamicVertexSize = 0;\n    for (const i in properties) {\n      const property = properties[i];\n      const attributeInfo = getAttributeInfoFromFormat(property.format);\n      if (property.dynamic) {\n        dynamicVertexSize += attributeInfo.stride;\n      } else {\n        staticVertexSize += attributeInfo.stride;\n      }\n    }\n    this._dynamicStride = dynamicVertexSize / 4;\n    this._staticStride = staticVertexSize / 4;\n    this.staticAttributeBuffer = new ViewableBuffer(size * 4 * staticVertexSize);\n    this.dynamicAttributeBuffer = new ViewableBuffer(size * 4 * dynamicVertexSize);\n    this.indexBuffer = createIndicesForQuads(size);\n    const geometry = new Geometry();\n    let dynamicOffset = 0;\n    let staticOffset = 0;\n    this._staticBuffer = new Buffer({\n      data: new Float32Array(1),\n      label: \"static-particle-buffer\",\n      shrinkToFit: false,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    this._dynamicBuffer = new Buffer({\n      data: new Float32Array(1),\n      label: \"dynamic-particle-buffer\",\n      shrinkToFit: false,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    for (const i in properties) {\n      const property = properties[i];\n      const attributeInfo = getAttributeInfoFromFormat(property.format);\n      if (property.dynamic) {\n        geometry.addAttribute(property.attributeName, {\n          buffer: this._dynamicBuffer,\n          stride: this._dynamicStride * 4,\n          offset: dynamicOffset * 4,\n          format: property.format\n        });\n        dynamicOffset += attributeInfo.size;\n      } else {\n        geometry.addAttribute(property.attributeName, {\n          buffer: this._staticBuffer,\n          stride: this._staticStride * 4,\n          offset: staticOffset * 4,\n          format: property.format\n        });\n        staticOffset += attributeInfo.size;\n      }\n    }\n    geometry.addIndex(this.indexBuffer);\n    const uploadFunction = this.getParticleUpdate(properties);\n    this._dynamicUpload = uploadFunction.dynamicUpdate;\n    this._staticUpload = uploadFunction.staticUpdate;\n    this.geometry = geometry;\n  }\n  getParticleUpdate(properties) {\n    const key = getParticleSyncKey(properties);\n    if (this._generateParticleUpdateCache[key]) {\n      return this._generateParticleUpdateCache[key];\n    }\n    this._generateParticleUpdateCache[key] = this.generateParticleUpdate(properties);\n    return this._generateParticleUpdateCache[key];\n  }\n  generateParticleUpdate(properties) {\n    return generateParticleUpdateFunction(properties);\n  }\n  update(particles, uploadStatic) {\n    if (particles.length > this._size) {\n      uploadStatic = true;\n      this._size = Math.max(particles.length, this._size * 1.5 | 0);\n      this.staticAttributeBuffer = new ViewableBuffer(this._size * this._staticStride * 4 * 4);\n      this.dynamicAttributeBuffer = new ViewableBuffer(this._size * this._dynamicStride * 4 * 4);\n      this.indexBuffer = createIndicesForQuads(this._size);\n      this.geometry.indexBuffer.setDataWithSize(\n        this.indexBuffer,\n        this.indexBuffer.byteLength,\n        true\n      );\n    }\n    const dynamicAttributeBuffer = this.dynamicAttributeBuffer;\n    this._dynamicUpload(particles, dynamicAttributeBuffer.float32View, dynamicAttributeBuffer.uint32View);\n    this._dynamicBuffer.setDataWithSize(\n      this.dynamicAttributeBuffer.float32View,\n      particles.length * this._dynamicStride * 4,\n      true\n    );\n    if (uploadStatic) {\n      const staticAttributeBuffer = this.staticAttributeBuffer;\n      this._staticUpload(particles, staticAttributeBuffer.float32View, staticAttributeBuffer.uint32View);\n      this._staticBuffer.setDataWithSize(\n        staticAttributeBuffer.float32View,\n        particles.length * this._staticStride * 4,\n        true\n      );\n    }\n  }\n  destroy() {\n    this._staticBuffer.destroy();\n    this._dynamicBuffer.destroy();\n    this.geometry.destroy();\n  }\n}\nfunction getParticleSyncKey(properties) {\n  const keyGen = [];\n  for (const key in properties) {\n    const property = properties[key];\n    keyGen.push(key, property.code, property.dynamic ? \"d\" : \"s\");\n  }\n  return keyGen.join(\"_\");\n}\n\nexport { ParticleBuffer };\n//# sourceMappingURL=ParticleBuffer.mjs.map\n","var wgsl = \"\\nstruct ParticleUniforms {\\n  uProjectionMatrix:mat3x3<f32>,\\n  uColor:vec4<f32>,\\n  uResolution:vec2<f32>,\\n  uRoundPixels:f32,\\n};\\n\\n@group(0) @binding(0) var<uniform> uniforms: ParticleUniforms;\\n\\n@group(1) @binding(0) var uTexture: texture_2d<f32>;\\n@group(1) @binding(1) var uSampler : sampler;\\n\\nstruct VSOutput {\\n    @builtin(position) position: vec4<f32>,\\n    @location(0) uv : vec2<f32>,\\n    @location(1) color : vec4<f32>,\\n  };\\n@vertex\\nfn mainVertex(\\n  @location(0) aVertex: vec2<f32>,\\n  @location(1) aPosition: vec2<f32>,\\n  @location(2) aUV: vec2<f32>,\\n  @location(3) aColor: vec4<f32>,\\n  @location(4) aRotation: f32,\\n) -> VSOutput {\\n  \\n   let v = vec2(\\n       aVertex.x * cos(aRotation) - aVertex.y * sin(aRotation),\\n       aVertex.x * sin(aRotation) + aVertex.y * cos(aRotation)\\n   ) + aPosition;\\n\\n   let position = vec4((uniforms.uProjectionMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);\\n\\n    let vColor = vec4(aColor.rgb * aColor.a, aColor.a) * uniforms.uColor;\\n\\n  return VSOutput(\\n   position,\\n   aUV,\\n   vColor,\\n  );\\n}\\n\\n@fragment\\nfn mainFragment(\\n  @location(0) uv: vec2<f32>,\\n  @location(1) color: vec4<f32>,\\n  @builtin(position) position: vec4<f32>,\\n) -> @location(0) vec4<f32> {\\n\\n    var sample = textureSample(uTexture, uSampler, uv) * color;\\n   \\n    return sample;\\n}\";\n\nexport { wgsl as default };\n//# sourceMappingURL=particles.wgsl.mjs.map\n","import { Color } from '../../../../color/Color.mjs';\nimport { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { GlProgram } from '../../../../rendering/renderers/gl/shader/GlProgram.mjs';\nimport { GpuProgram } from '../../../../rendering/renderers/gpu/shader/GpuProgram.mjs';\nimport { Shader } from '../../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { TextureStyle } from '../../../../rendering/renderers/shared/texture/TextureStyle.mjs';\nimport fragment from './particles.frag.mjs';\nimport vertex from './particles.vert.mjs';\nimport wgsl from './particles.wgsl.mjs';\n\n\"use strict\";\nclass ParticleShader extends Shader {\n  constructor() {\n    const glProgram = GlProgram.from({\n      vertex,\n      fragment\n    });\n    const gpuProgram = GpuProgram.from({\n      fragment: {\n        source: wgsl,\n        entryPoint: \"mainFragment\"\n      },\n      vertex: {\n        source: wgsl,\n        entryPoint: \"mainVertex\"\n      }\n    });\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        // this will be replaced with the texture from the particle container\n        uTexture: Texture.WHITE.source,\n        // this will be replaced with the texture style from the particle container\n        uSampler: new TextureStyle({}),\n        // this will be replaced with the local uniforms from the particle container\n        uniforms: {\n          uTranslationMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n          uColor: { value: new Color(16777215), type: \"vec4<f32>\" },\n          uRound: { value: 1, type: \"f32\" },\n          uResolution: { value: [0, 0], type: \"vec2<f32>\" }\n        }\n      }\n    });\n  }\n}\n\nexport { ParticleShader };\n//# sourceMappingURL=ParticleShader.mjs.map\n","var vertex = \"attribute vec2 aVertex;\\nattribute vec2 aUV;\\nattribute vec4 aColor;\\n\\nattribute vec2 aPosition;\\nattribute float aRotation;\\n\\nuniform mat3 uTranslationMatrix;\\nuniform float uRound;\\nuniform vec2 uResolution;\\nuniform vec4 uColor;\\n\\nvarying vec2 vUV;\\nvarying vec4 vColor;\\n\\nvec2 roundPixels(vec2 position, vec2 targetSize)\\n{       \\n    return (floor(((position * 0.5 + 0.5) * targetSize) + 0.5) / targetSize) * 2.0 - 1.0;\\n}\\n\\nvoid main(void){\\n    float cosRotation = cos(aRotation);\\n    float sinRotation = sin(aRotation);\\n    float x = aVertex.x * cosRotation - aVertex.y * sinRotation;\\n    float y = aVertex.x * sinRotation + aVertex.y * cosRotation;\\n\\n    vec2 v = vec2(x, y);\\n    v = v + aPosition;\\n\\n    gl_Position = vec4((uTranslationMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);\\n\\n    if(uRound == 1.0)\\n    {\\n        gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\\n    }\\n\\n    vUV = aUV;\\n    vColor = vec4(aColor.rgb * aColor.a, aColor.a) * uColor;\\n}\\n\";\n\nexport { vertex as default };\n//# sourceMappingURL=particles.vert.mjs.map\n","var fragment = \"varying vec2 vUV;\\nvarying vec4 vColor;\\n\\nuniform sampler2D uTexture;\\n\\nvoid main(void){\\n    vec4 color = texture2D(uTexture, vUV) * vColor;\\n    gl_FragColor = color;\\n}\";\n\nexport { fragment as default };\n//# sourceMappingURL=particles.frag.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs';\nimport { State } from '../../../rendering/renderers/shared/state/State.mjs';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform.mjs';\nimport { ParticleBuffer } from './ParticleBuffer.mjs';\nimport { ParticleShader } from './shader/ParticleShader.mjs';\n\n\"use strict\";\nclass ParticleContainerPipe {\n  /**\n   * @param renderer - The renderer this sprite batch works for.\n   * @param adaptor\n   */\n  constructor(renderer, adaptor) {\n    this.state = State.for2d();\n    this._gpuBufferHash = /* @__PURE__ */ Object.create(null);\n    // eslint-disable-next-line max-len\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this.localUniforms = new UniformGroup({\n      uTranslationMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uColor: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uRound: { value: 1, type: \"f32\" },\n      uResolution: { value: [0, 0], type: \"vec2<f32>\" }\n    });\n    this.renderer = renderer;\n    this.adaptor = adaptor;\n    this.defaultShader = new ParticleShader();\n    this.state = State.for2d();\n  }\n  validateRenderable(_renderable) {\n    return false;\n  }\n  addRenderable(renderable, instructionSet) {\n    this.renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add(renderable);\n  }\n  getBuffers(renderable) {\n    return this._gpuBufferHash[renderable.uid] || this._initBuffer(renderable);\n  }\n  _initBuffer(renderable) {\n    this._gpuBufferHash[renderable.uid] = new ParticleBuffer({\n      size: renderable.particleChildren.length,\n      properties: renderable._properties\n    });\n    renderable.on(\"destroyed\", this._destroyRenderableBound);\n    return this._gpuBufferHash[renderable.uid];\n  }\n  updateRenderable(_renderable) {\n  }\n  destroyRenderable(renderable) {\n    const buffer = this._gpuBufferHash[renderable.uid];\n    buffer.destroy();\n    this._gpuBufferHash[renderable.uid] = null;\n    renderable.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  execute(container) {\n    const children = container.particleChildren;\n    if (children.length === 0) {\n      return;\n    }\n    const renderer = this.renderer;\n    const buffer = this.getBuffers(container);\n    container.texture || (container.texture = children[0].texture);\n    const state = this.state;\n    buffer.update(children, container._childrenDirty);\n    container._childrenDirty = false;\n    state.blendMode = getAdjustedBlendModeBlend(container.blendMode, container.texture._source);\n    const uniforms = this.localUniforms.uniforms;\n    const transformationMatrix = uniforms.uTranslationMatrix;\n    container.worldTransform.copyTo(transformationMatrix);\n    transformationMatrix.prepend(renderer.globalUniforms.globalUniformData.projectionMatrix);\n    uniforms.uResolution = renderer.globalUniforms.globalUniformData.resolution;\n    uniforms.uRound = renderer._roundPixels | container._roundPixels;\n    color32BitToUniform(\n      container.groupColorAlpha,\n      uniforms.uColor,\n      0\n    );\n    this.adaptor.execute(this, container);\n  }\n  /** Destroys the ParticleRenderer. */\n  destroy() {\n    if (this.defaultShader) {\n      this.defaultShader.destroy();\n      this.defaultShader = null;\n    }\n  }\n}\n\nexport { ParticleContainerPipe };\n//# sourceMappingURL=ParticleContainerPipe.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { GlParticleContainerAdaptor } from '../gl/GlParticleContainerAdaptor.mjs';\nimport { ParticleContainerPipe } from './ParticleContainerPipe.mjs';\n\n\"use strict\";\nclass GlParticleContainerPipe extends ParticleContainerPipe {\n  constructor(renderer) {\n    super(renderer, new GlParticleContainerAdaptor());\n  }\n}\n/** @ignore */\nGlParticleContainerPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes\n  ],\n  name: \"particle\"\n};\n\nexport { GlParticleContainerPipe };\n//# sourceMappingURL=GlParticleContainerPipe.mjs.map\n","\"use strict\";\nclass GpuParticleContainerAdaptor {\n  execute(particleContainerPipe, container) {\n    const renderer = particleContainerPipe.renderer;\n    const shader = container.shader || particleContainerPipe.defaultShader;\n    shader.groups[0] = renderer.renderPipes.uniformBatch.getUniformBindGroup(particleContainerPipe.localUniforms, true);\n    shader.groups[1] = renderer.texture.getTextureBindGroup(container.texture);\n    const state = particleContainerPipe.state;\n    const buffer = particleContainerPipe.getBuffers(container);\n    renderer.encoder.draw({\n      geometry: buffer.geometry,\n      shader: container.shader || particleContainerPipe.defaultShader,\n      state,\n      size: container.particleChildren.length * 6\n    });\n  }\n}\n\nexport { GpuParticleContainerAdaptor };\n//# sourceMappingURL=GpuParticleContainerAdaptor.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { GpuParticleContainerAdaptor } from '../gpu/GpuParticleContainerAdaptor.mjs';\nimport { ParticleContainerPipe } from './ParticleContainerPipe.mjs';\n\n\"use strict\";\nclass GpuParticleContainerPipe extends ParticleContainerPipe {\n  constructor(renderer) {\n    super(renderer, new GpuParticleContainerAdaptor());\n  }\n}\n/** @ignore */\nGpuParticleContainerPipe.extension = {\n  type: [\n    ExtensionType.WebGPUPipes\n  ],\n  name: \"particle\"\n};\n\nexport { GpuParticleContainerPipe };\n//# sourceMappingURL=GpuParticleContainerPipe.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { GlParticleContainerPipe } from './shared/GlParticleContainerPipe.mjs';\nimport { GpuParticleContainerPipe } from './shared/GpuParticleContainerPipe.mjs';\n\n\"use strict\";\nextensions.add(GlParticleContainerPipe);\nextensions.add(GpuParticleContainerPipe);\n//# sourceMappingURL=init.mjs.map\n"],"names":["localUniformBit","name","vertex","header","main","end","localUniformBitGroup2","replace","localUniformBitGl","updateTextBounds","batchableSprite","text","texture","bounds","_anchor","padding","_style","minX","minY","maxX","maxY","tempBounds","getPo2TextureFromSource","image","width","height","resolution","getOptimalTexture","source","uploadMethodId","resource","alphaMode","frame","emit","updateUvs","color32BitToUniform","abgr","out","offset","alpha","ResizePlugin","init","options","Object","defineProperty","this","set","dom","globalThis","removeEventListener","queueResize","_resizeTo","addEventListener","resize","get","_cancelResize","_resizeId","requestAnimationFrame","cancelAnimationFrame","window","innerWidth","innerHeight","clientWidth","clientHeight","renderer","render","resizeTo","destroy","extension","Application","TickerPlugin","assign","autoStart","sharedTicker","ticker","_ticker","remove","add","LOW","stop","start","Ticker","shared","oldTicker","FilterPipe","constructor","_renderer","push","filterEffect","container","instructionSet","renderPipes","batch","break","renderPipeId","canBundle","action","pop","_filterEffect","_container","execute","instruction","filter","type","WebGLPipes","WebGPUPipes","CanvasPipes","quadGeometry","Geometry","attributes","aPosition","buffer","Float32Array","format","stride","indexBuffer","Uint32Array","FilterSystem","_filterStackIndex","_filterStack","_filterGlobalUniforms","UniformGroup","uInputSize","value","uInputPixel","uInputClamp","uOutputFrame","uGlobalFrame","uOutputTexture","_globalFilterBindGroup","BindGroup","activeBackTexture","_activeFilterData","backTexture","filters","_getFilterData","filterData","length","skip","renderables","clear","tempMatrix","matrix","i","renderable","globalDisplayStatus","worldTransform","addBounds","getGlobalRenderableBounds","filterArea","addRect","applyMatrix","getFastGlobalBounds","filterFrameTransform","renderGroup","parentRenderGroup","cacheToLocalTransform","colorTextureSource","renderTarget","colorTexture","Infinity","antialias","blendRequired","enabled","clipToViewport","Math","min","_resolution","compatibleRenderers","backBuffer","useBackBuffer","warn","viewPort","rootViewPort","rootResolution","fitBounds","scale","ceil","pad","isPositive","previousRenderSurface","renderSurface","inputTexture","TexturePool","bind","globalUniforms","Texture","EMPTY","finishRenderPass","previousBounds","getRenderTarget","getBackTexture","setResource","style","apply","returnTexture","flip","flop","t","lastRenderSurface","backgroundResolution","x","y","floor","copyToTexture","applyFilter","input","output","Point","isFinalTarget","rootRenderTarget","currentIndex","filterUniforms","uniforms","outputFrame","inputSize","inputPixel","inputClamp","globalFrame","outputTexture","lastIndex","filterData2","pixelWidth","pixelHeight","rootTexture","isRoot","update","uniformBatch","batchUniforms","getUboResource","groups","encoder","draw","geometry","shader","state","_state","topology","WEBGL","Bounds","calculateSpriteMatrix","outputMatrix","sprite","data","mappedMatrix","_source","copyTo","Matrix","prepend","invert","translate","anchor","WebGLSystem","WebGPUSystem","_MeshGeometry","args","positions","uvs","indices","defaultOptions","shrinkToFit","shrinkBuffersToFit","super","label","usage","VERTEX","COPY_DST","aUV","INDEX","batchMode","MeshGeometry","MeshPipe","adaptor","localUniforms","uTransformMatrix","uColor","uRound","localUniformsBindGroup","_meshDataHash","create","_gpuBatchableMeshHash","_destroyRenderableBound","destroyRenderable","_adaptor","renderableGC","addManagedHash","validateRenderable","mesh","meshData","_getMeshData","wasBatched","batched","isBatched","_geometry","indexSize","vertexSize","batchableMesh","_getBatchableMesh","uid","_texture","_textureMatrixUpdateId","_batcher","checkAndUpdateTexture","addRenderable","batcher","gpuBatchableMesh","setTexture","addToBatch","updateRenderable","updateElement","gpuMesh","return","off","isRenderable","blendMode","getAdjustedBlendModeBlend","groupBlendMode","groupTransform","_roundPixels","groupColorAlpha","_initMeshData","on","_initBatchableMesh","BatchableMesh","transform","roundPixels","localUniformMSDFBit","fragment","localUniformMSDFBitGl","mSDFBit","mSDFBitGl","gpuProgram","glProgram","SdfShader","Shader","uDistance","maxTextures","bits","colorBit","generateTextureBatchBit","roundPixelsBit","resources","batchSamplers","getBatchSamplersUniformGroup","BitmapTextPipe","_gpuBitmapText","bitmapText","graphicsRenderable","_getGpuBitmapText","_didTextUpdate","_updateContext","graphics","syncWithProxy","context","customShader","_updateDistanceField","_destroyRenderableByUid","renderableUid","proxyGraphics","bitmapFont","BitmapFontManager","getFont","distanceField","chars","Array","from","currentY","baseLineOffset","bitmapTextLayout","getBitmapTextLayout","index","tx","ty","offsetY","_stroke","_x","_y","tint","applyFillAsTint","_fill","color","lines","line","j","charPositions","char","charData","round","xOffset","yOffset","lineHeight","initGpuText","proxyRenderable","Graphics","fontFamily","dynamicFont","Cache","a","b","c","dx","sqrt","dy","d","worldScale","abs","fontScale","baseRenderedFontSize","fontSize","distance","range","proxy","groupColor","localDisplayStatus","groupAlpha","CanvasTextPipe","_gpuText","runners","resolutionChange","gpuText","_autoResolution","onViewUpdate","_getGpuText","newKey","_getKey","currentKey","_updateText","_destroyRenderableById","textUid","canvasText","decreaseReferenceCount","_updateGpuText","getManagedTexture","gpuTextData","BatchableSprite","checkRow","checkColumn","top","bottom","CanvasTextSystem","_activeTextures","getTextureSize","measured","CanvasTextMetrics","measureText","max","getTexture","_textKey","deprecation","TextStyle","canvasAndContext","createTextureAndCanvas","initSource","CanvasPool","returnCanvasAndContext","getOptimalCanvasAndContext","canvas","renderTextToCanvas","trim","trimmed","getContext","willReadFrequently","TypeError","getImageData","left","right","Rectangle","getCanvasBoundingBox","copyFrom","textKey","_increaseReferenceCount","usageCount","activeTexture","getReferenceCount","font","fontStringFromTextStyle","lineWidths","maxLineWidth","fontProperties","resetTransform","textBaseline","strokeStyle","lineWidth","miterLimit","lineJoin","join","lineCap","cap","linePositionX","linePositionY","passesCount","dropShadow","isShadowPass","dsOffsetText","dsOffsetShadow","fillStyle","shadowOptions","dropShadowColor","dropShadowAlpha","shadowColor","Color","setValue","setAlpha","toRgbaString","dropShadowBlur","blur","dropShadowDistance","shadowBlur","shadowOffsetX","cos","angle","shadowOffsetY","sin","getCanvasFillStyle","alignment","linePositionYShift","strokeWidth","i2","ascent","align","_drawLetterSpacing","isStroke","letterSpacing","useExperimentalLetterSpacing","experimentalLetterSpacingSupported","experimentalLetterSpacing","textLetterSpacing","strokeText","fillText","currentPosition","stringArray","graphemeSegmenter","previousWidth","currentWidth","currentChar","textStr","CanvasSystem","_PlaneGeometry","verticesX","verticesY","build","total","verts","sizeX","sizeY","totalSub","xpos","ypos","value2","value3","value4","buffers","PlaneGeometry","_NineSliceGeometry","_originalWidth","originalWidth","_originalHeight","originalHeight","_leftWidth","leftWidth","_rightWidth","rightWidth","_topHeight","topHeight","_bottomHeight","bottomHeight","_anchorX","_anchorY","updatePositions","p","w","scaleW","h","scaleH","anchorOffsetX","anchorOffsetY","getBuffer","_uvw","_uvh","NineSliceGeometry","NineSliceSpritePipe","_gpuSpriteHash","gpuSprite","_getGpuSprite","didViewUpdate","_updateBatchableSprite","_initGPUSprite","blendModeIds","normal","multiply","screen","overlay","erase","_State","polygonOffset","blend","depthMask","offsets","cullMode","culling","clockwiseFrontFace","depthTest","_blendMode","_blendModeId","_polygonOffset","toString","for2d","default2d","State","batcherName","attributeSize","packAsQuad","_attributeStart","_batch","reset","tilingBit","tilingBitGl","TilingSpriteShader","tilingUniforms","uMapCoord","uClampFrame","uClampOffset","uTextureTransform","uSizeAnchor","uTexture","uSampler","updateUniforms","anchorX","anchorY","textureWidth","textureHeight","textureMatrix","mapCoord","QuadGeometry","sharedQuad","TilingSpritePipe","_tilingSpriteDataHash","tilingSpriteData","_getTilingSpriteData","couldBatch","canBatch","_updateCanBatch","tilingSprite","_updateBatchableMesh","bindGroup","_tileTransform","_initTilingSpriteData","slice","renderableData","addressMode","applyAnchorToTexture","array","size","setUvs","setPositions","_nonPowOf2wrapping","supports","nonPowOf2wrapping","isSimple","isPowerOfTwo","indexOffset","attributeOffset","_uvUpdateId","_topology","uvBuffer","transformedUvs","_transformedUvs","_updateID","multiplyUvs","GraphicsPipe","_graphicsBatchesHash","gpuContext","graphicsContext","updateGpuContext","isBatchable","_rebuild","_addToBatcher","batches","_removeBatchForRenderable","getGpuContext","_initBatchesForRenderable","batchPipe","_getBatchesForRenderable","map","batchClone","BatchableGraphics","graphicsUid","forEach","GraphicsContextSystem","HTMLTextPipe","htmlText","textureNeedsUploading","htmlTextUid","catch","e","console","error","generatingTexture","nssvg","nsxhtml","HTMLTextRenderData","svgRoot","document","createElementNS","foreignObject","domElement","styleElement","Image","setAttribute","overflow","appendChild","dropShadowToCSS","dropShadowStyle","toHexa","position","strokeToCSS","stroke","toHex","templates","fontWeight","fontStyle","fontVariant","whiteSpace","wordWrapWidth","fill","breakWords","HTMLTextStyle","_cssOverrides","cssOverrides","tagStyles","_generateKey","_styleKey","generateTextStyleKey","_cssStyle","clone","wordWrap","cssStyle","cssStyles","tagStyle","cssTagStyle","tagStyleToCSS","textStyleToCSS","addOverride","toAdd","v","includes","removeOverride","toRemove","async","loadFontCSS","url","dataSrc","response","fetch","blob","reader","FileReader","Promise","resolve","reject","onloadend","result","onerror","readAsDataURL","loadFontAsBase64","FontStylePromiseCache","Map","tempHTMLTextRenderData","HTMLTextSystem","_createCanvas","WEBGPU","_buildTexturePromise","promise","then","htmlTextData","fontFamilies","dedupe","matches","match","addFontFamily","fontFamily2","isArray","split","extractFontFamilies","fontCSS","fontPromises","has","all","getFontCss","defaultTextStyle","fontStyleCSS","htmlTextRenderData","innerHTML","textContent","body","contentBounds","getBoundingClientRect","doublePadding","measureHtmlText","svgURL","XMLSerializer","serializeToString","getSVGUrl","delay","resolve2","setTimeout","onload","src","encodeURIComponent","crossOrigin","loadSVGImage","userAgent","getNavigator","test","isSafari","clearRect","drawImage","getTemporaryCanvasFromImage","_cleanUp","defaultFontOptions","GlParticleContainerAdaptor","particleContainerPipe","defaultShader","gl","getBuffers","glType","BYTES_PER_ELEMENT","UNSIGNED_SHORT","UNSIGNED_INT","drawElements","TRIANGLES","particleChildren","createIndicesForQuads","outBuffer","totalIndices","Uint16Array","Error","generateUpdateFunction","properties","dynamic","funcFragments","property","code","getAttributeInfoFromFormat","unshift","functionSource","Function","ParticleBuffer","_size","_generateParticleUpdateCache","staticVertexSize","dynamicVertexSize","attributeInfo","_dynamicStride","_staticStride","staticAttributeBuffer","ViewableBuffer","dynamicAttributeBuffer","dynamicOffset","staticOffset","_staticBuffer","Buffer","_dynamicBuffer","addAttribute","attributeName","addIndex","uploadFunction","getParticleUpdate","_dynamicUpload","dynamicUpdate","_staticUpload","staticUpdate","key","keyGen","getParticleSyncKey","generateParticleUpdate","generateParticleUpdateFunction","particles","uploadStatic","setDataWithSize","byteLength","float32View","uint32View","wgsl","ParticleShader","GlProgram","GpuProgram","entryPoint","WHITE","TextureStyle","uTranslationMatrix","uResolution","ParticleContainerPipe","_gpuBufferHash","_renderable","_initBuffer","_properties","children","_childrenDirty","transformationMatrix","globalUniformData","projectionMatrix","GlParticleContainerPipe","GpuParticleContainerAdaptor","getUniformBindGroup","getTextureBindGroup","GpuParticleContainerPipe"],"sourceRoot":""}